<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_Element" Id="{036736e7-f9bf-4a69-9445-0ffc36020f10}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_Element IMPLEMENTS I_Material
(*
Intended to represent an element and some associated state values with that element.
Allows external access to overwrite properties of the element.
If a property is set to an invalid value, and the name of the element can be found
in the property lookup table, then the invalid value is overwritten to the value
found in the lookup table.
If a property is set to an invalid value and the provided element name is not found
in the property lookup table, the value is left as is and the error boolean is set
and an error message is set.
If a property is set to a valid value, even if the value disagrees with the value
found in that property's lookup table, then the value is left as in regardless
of the validity of the element name currently set.
Values that are not properties are not intended to be written to or read directly.
Always use the properties to interface with the function block.
*)
VAR
    {attribute 'pytmc' := '
        pv: Mass
        io: io
    '}
    fMass : LREAL;

    {attribute 'pytmc' := '
        pv: Name
        io: io
    '}
    sName : STRING;

    {attribute 'pytmc' := '
        pv: Protons
        io: io
    '}
    nProtons : INT;

    {attribute 'pytmc' := '
        pv: Density
        io: io
    '}
    fDensity : LREAL;

    {attribute 'pytmc' := '
        pv: Error
        io: i
    '}
    bError : BOOL;

    {attribute 'pytmc' := '
        pv: ErrorMsg
        io: i
    '}
    sErrorMsg : T_MaxString;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="Density" Id="{5988db1c-263a-49f3-827c-d3d591debf39}">
      <Declaration><![CDATA[
PROPERTY Density : LREAL
]]></Declaration>
      <Get Name="Get" Id="{9a40a13c-c07c-49e4-a85c-18c7660f376b}">
        <Declaration><![CDATA[
VAR
    fbElementDensity : FB_ElementDensity;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
// If we have an invalid density value, try to look it up in the element density lookup table.
IF fDensity <= 0.0 THEN
    // Use lookup table to get the density for the specified name.
    fbElementDensity(
        sName := Name,
        bFound =>,
        fValue =>
    );
    // If we find the name in the lookup table, update the density.
    IF fbElementDensity.bFound THEN
        fDensity := fbElementDensity.fValue;
    ELSE
        // Set the error bit true if we still have an invalid density.
        bError := TRUE;
        sErrorMsg := CONCAT('Invalid density value of: [',
            CONCAT(LREAL_TO_STRING(fDensity),
            CONCAT(']. Unable to find element named: [',
            CONCAT(Name,
            '] in the lookup table.'))));
    END_IF
END_IF

Density := fDensity;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{03c2386c-b342-4210-a3ed-0752fc2f7a47}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
fDensity := Density;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Error" Id="{60f55223-0106-4252-ac7a-fa8496e5b982}">
      <Declaration><![CDATA[
PROPERTY Error : BOOL
]]></Declaration>
      <Get Name="Get" Id="{cb0a7a02-656b-432b-97f0-4183d73bda25}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
bError := FALSE;
sErrorMsg := '';

fMass := Mass;
sName := Name;
nProtons := Protons;
fDensity := Density;

Error := bError;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorMsg" Id="{8dc270f2-9dde-4384-b6b1-af8e5748dbe9}">
      <Declaration><![CDATA[PROPERTY ErrorMsg : T_MaxString]]></Declaration>
      <Get Name="Get" Id="{9bcb73db-a52f-4679-9e83-6a9e0afdd554}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
bError := Error;

ErrorMsg := sErrorMsg;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Mass" Id="{31b2a0f1-ae0a-4416-ab03-b332ea566adc}">
      <Declaration><![CDATA[
PROPERTY Mass : LREAL
]]></Declaration>
      <Get Name="Get" Id="{d0cbf8b3-8e2a-4602-a6ac-ca017dd74765}">
        <Declaration><![CDATA[
VAR
    fbAtomicMass : FB_AtomicMass;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
// If we have an invalid mass value, try to look it up in the atomic mass lookup table.
IF fMass <= 0.0 THEN
    // Use lookup table to get atomic mass for specified name.
    fbAtomicMass(
        sName := Name,
        bFound =>,
        fValue =>
    );
    // If we find the name in the lookup table, update the mass.
    IF fbAtomicMass.bFound THEN
        fMass := fbAtomicMass.fValue;
    ELSE
        // Set the error bit true if we still have an invalid mass.
        bError := TRUE;
        sErrorMsg := CONCAT('Invalid mass value of: [',
            CONCAT(LREAL_TO_STRING(fMass),
            CONCAT(']. Unable to find element named: [',
            CONCAT(Name,
            '] in the lookup table.'))));
    END_IF
END_IF

Mass := fMass;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{36480fed-1dda-4006-a1fe-211e4981789a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
fMass := Mass;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Name" Id="{220e42b2-72cf-4b6b-96e0-b36ccb11227c}">
      <Declaration><![CDATA[
PROPERTY Name : STRING
]]></Declaration>
      <Get Name="Get" Id="{f8a8189e-379c-47fd-b4a7-b767e0d98d8c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
Name := sName;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{80fdff07-2ae3-4fb9-aac3-d0d80b5aa529}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
sName := Name;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Protons" Id="{610ab6d9-b89e-4c2d-b83d-9d312c3f4503}">
      <Declaration><![CDATA[
PROPERTY Protons : INT
]]></Declaration>
      <Get Name="Get" Id="{5197a756-cb36-445b-8219-2749bf1125bd}">
        <Declaration><![CDATA[
VAR
    fbAtomicNumber : FB_AtomicNumber;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
// If we have an invalid number of protons value, try to look it up in the atomic number lookup table.
IF nProtons <= 0 THEN
    // Use lookup table to get number of protons for specified element name.
    fbAtomicNumber(
        sName := Name,
        bFound =>,
        nValue =>
    );
    // If we find the name in the lookup table, update the number of protons.
    IF fbAtomicNumber.bFound THEN
        nProtons := fbAtomicNumber.nValue;
    ELSE
        // Set the error bit true if we still have an invalid number of protons.
        bError := TRUE;
        sErrorMsg := CONCAT('Invalid number of protons: [',
            CONCAT(INT_TO_STRING(nProtons),
            CONCAT(']. Unable to find element named: [',
            CONCAT(Name,
            '] in the lookup table.'))));
    END_IF
END_IF

Protons := nProtons;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{e661cef8-a37e-4dbd-87ed-dc44de405e59}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
nProtons := Protons;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="SetState" Id="{25429d11-6525-4e0f-962f-7c5660e2977e}">
      <Declaration><![CDATA[
METHOD SetState
VAR_INPUT
    fMass : LREAL;
    sName : STRING;
    nProtons : INT;
    fDensity : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Name := sName;
Mass := fMass;
Protons := nProtons;
Density := fDensity;

bError := Error;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>