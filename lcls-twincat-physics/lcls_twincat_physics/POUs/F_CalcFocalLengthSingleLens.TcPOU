<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="F_CalcFocalLengthSingleLens" Id="{ced569d5-ba1a-4aad-a8c1-0a9a8f081151}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION F_CalcFocalLengthSingleLens
(*
Take the real part of the index of refraction for the lens at the present state and the lens radius
of curvature and calculate the focal length for that lens.
*)
VAR_INPUT
    iDelta : I_FallibleLREAL; // The x-ray delta, the real part of the index of refraction, unitless value.
    iRadius : I_FallibleLREAL; // The radius of curvature of the lens, in meters.
END_VAR
VAR_OUTPUT
    fbFocalLength : FB_FallibleLREAL; // The calculated focal length, in meters.
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Initialize focal length and error values.
fbFocalLength.Val := 0.0;
fbFocalLength.ClearError();

// Check for an invalid delta input.
IF iDelta.GetError() THEN
    fbFocalLength.SetError(
        sMsg := CONCAT('The input delta has the following error message: [',
        CONCAT(iDelta.GetErrorMsg(),
        ']'))
    );
    RETURN;
END_IF

IF iDelta.Val = 0.0 THEN
    fbFocalLength.SetError(
        sMsg := CONCAT('The delta specified: [',
        CONCAT(LREAL_TO_STRING(iDelta.Val),
        '] must not be 0.'))
    );
    RETURN;
END_IF

// Check for an invalid radius input.
IF iRadius.GetError() THEN
    fbFocalLength.SetError(
        sMsg := CONCAT('The input radius has the following error message: [',
        CONCAT(iRadius.GetErrorMsg(),
        ']'))
    );
    RETURN;
END_IF

IF iRadius.Val <= 0.0 THEN
    fbFocalLength.SetError(
        sMsg := CONCAT('The radius specified: [',
        CONCAT(LREAL_TO_STRING(iRadius.Val),
        '] must be greater than 0.'))
    );
    RETURN;
END_IF

fbFocalLength.Val := iRadius.Val / 2.0 / iDelta.Val;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>