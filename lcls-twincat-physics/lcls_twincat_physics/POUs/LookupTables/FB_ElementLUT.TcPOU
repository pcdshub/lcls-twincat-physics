<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ElementLUT" Id="{396e148e-5a54-4e0f-be5e-d5ad59e7e763}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_ElementLUT EXTENDS FB_Fallible IMPLEMENTS I_StringLookupElement
VAR
    iConvertUnits : I_ConvertUnitsLREAL;
    iAtomicMassLUT : I_StringLookupLREAL;
    iAtomicNumberLUT : I_StringLookupINT;
    iDensityLUT : I_StringLookupLREAL;

    fbAtomicMass : FB_QuantityLREALPublic(Units := 'AMU');
    fbAtomicNumber : FB_QuantityINTPublic(Units := 'Protons');
    fbDensity : FB_QuantityLREALPublic(Units := 'g/cm**3');
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_Init" Id="{e170e441-4319-4285-be2c-da9c65660aea}">
      <Declaration><![CDATA[
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)

    ConvertUnits : I_ConvertUnitsLREAL;
    AtomicMassLUT : I_StringLookupLREAL;
    AtomicNumberLUT : I_StringLookupINT;
    DensityLUT : I_StringLookupLREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
THIS^.iConvertUnits := ConvertUnits;
THIS^.iAtomicMassLUT := AtomicMassLUT;
THIS^.iAtomicNumberLUT := AtomicNumberLUT;
THIS^.iDensityLUT := DensityLUT;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LookupAtomicMass" Id="{b49da3c3-29e7-4735-b051-4bef81174655}">
      <Declaration><![CDATA[
METHOD LookupAtomicMass
VAR_INPUT
    ElementName : T_MaxString;
    AtomicMass : I_QuantityLREALPublic;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ClearError();
fbAtomicMass.ClearError();

iAtomicMassLUT.Lookup(
    StringToLookup := ElementName,
    Result := fbAtomicMass
);

IF iAtomicMassLUT.GetError() THEN
    SetError(
        Msg := CONCAT('The atomic mass lookup table has an error: ',
        iAtomicMassLUT.GetErrorMsg())
    );
    fbAtomicMass.SetError(Msg := GetErrorMsg());
    AtomicMass.SetError(Msg := GetErrorMsg());
    RETURN;
END_IF

iConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbAtomicMass,
    DesiredUnits := AtomicMass.Units,
    ConvertedQuantity := fbAtomicMass
);

IF iConvertUnits.GetError() THEN
    SetError(Msg :=
        CONCAT('Error returned when attempting to convert units of atomic mass: ',
        iConvertUnits.GetErrorMsg())
    );
    AtomicMass.SetError(Msg := GetErrorMsg());
    RETURN;
END_IF

AtomicMass.Copy(fbAtomicMass);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LookupAtomicNumber" Id="{9aa2ed00-c722-4992-b0e5-7489d0c70f8e}">
      <Declaration><![CDATA[
METHOD LookupAtomicNumber
VAR_INPUT
    ElementName : T_MaxString;
    AtomicNumber : I_QuantityINTPublic;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ClearError();
fbAtomicNumber.ClearError();

fbAtomicNumber.Units := AtomicNumber.Units;

iAtomicNumberLUT.Lookup(
    StringToLookup := ElementName,
    Result := fbAtomicNumber
);

IF iAtomicNumberLUT.GetError() THEN
    SetError(
        Msg := CONCAT('The atomic number lookup table has an error: ',
        iAtomicNumberLUT.GetErrorMsg())
    );
    fbAtomicNumber.SetError(Msg := GetErrorMsg());
    AtomicNumber.SetError(Msg := GetErrorMsg());
    RETURN;
END_IF

AtomicNumber.Copy(fbAtomicNumber);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LookupDensity" Id="{b0ef6550-2f85-4569-94b6-5ef5f47fa201}">
      <Declaration><![CDATA[
METHOD LookupDensity
VAR_INPUT
    ElementName : T_MaxString;
    Density : I_QuantityLREALPublic;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ClearError();
fbDensity.ClearError();

fbDensity.Units := Density.Units;

iDensityLUT.Lookup(
    StringToLookup := ElementName,
    Result := fbDensity
);

IF iDensityLUT.GetError() THEN
    SetError(
        Msg := CONCAT('The density lookup table has an error: ',
        iDensityLUT.GetErrorMsg())
    );
    fbDensity.SetError(Msg := GetErrorMsg());
    Density.SetError(Msg := GetErrorMsg());
    RETURN;
END_IF

iConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbDensity,
    DesiredUnits := Density.Units,
    ConvertedQuantity := fbDensity
);

IF iConvertUnits.GetError() THEN
    SetError(Msg :=
        CONCAT('Error returned when attempting to convert units of density: ',
        iConvertUnits.GetErrorMsg())
    );
    Density.SetError(Msg := GetErrorMsg());
    RETURN;
END_IF

Density.Copy(fbDensity);
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>