<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_LensSetCompounder" Id="{0f0490d7-2e74-4a81-9802-0da9be64993a}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_LensSetCompounder EXTENDS FB_Fallible IMPLEMENTS I_LensSetCompounder
VAR
    iConvertUnits : I_ConvertUnitsLREAL;
    iCalcImageDistance : I_CalcImageDistance;

    bFirstCompound : BOOL := TRUE;
    fbPrevSourceDistance : FB_QuantityLREALPublic(Units := 'm');

    {attribute 'pytmc' := 'pv: FocalLengthCompounded'}
    fbFocalLengthCompounded : FB_QuantityLREALPublic(Units := 'm');
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Compound" Id="{3753333e-1cf4-40b2-ad60-b4ae049886c5}">
      <Declaration><![CDATA[
METHOD Compound
VAR_INPUT
    FocalLength : I_QuantityLREAL;
    SourceDistance : I_QuantityLREAL;
END_VAR
VAR_OUTPUT
    FocalLengthCompounded : FB_QuantityLREALPublic(Units := 'm');
END_VAR
VAR
    fbFocalLength : FB_QuantityLREALPublic(Units := 'm');
    fbSourceDistance : FB_QuantityLREALPublic(Units := 'm');
    fbFocalLengthInverse : FB_QuantityLREALPublic(Units := '1/m');
    fbVirtualSourceDistance : FB_QuantityLREALPublic(Units := 'm');
    fbVirtualSourceDistanceInverse : FB_QuantityLREALPublic(Units := '1/m');
    fbSourceDistanceInverse : FB_QuantityLREALPublic(Units := '1/m');
    fbFocalLengthCompoundedInverse : FB_QuantityLREALPublic(Units := '1/m');
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Check for an invalid focal length input.
IF FocalLength.Val = 0.0 THEN
    SetError(
        Msg := CONCAT('The focal length specified: [',
        CONCAT(LREAL_TO_STRING(FocalLength.Val),
        '] must not be 0.'))
    );
    RETURN;
END_IF

iConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := FocalLength,
    DesiredUnits := FocalLengthCompounded.Units,
    ConvertedQuantity => fbFocalLength
);

IF iConvertUnits.GetError() THEN
    SetError(Msg :=
        CONCAT('Error returned when attempting to convert units of focal length input: ',
        iConvertUnits.GetErrorMsg())
    );
    RETURN;
END_IF

// Calculate the inverse of focal length input.
fbFocalLengthInverse.Val := 1.0 / FocalLength.Val;

// Check for an invalid source distance input.
IF SourceDistance.Val = 0.0 THEN
    SetError(
        Msg := CONCAT('The source distance specified: [',
        CONCAT(LREAL_TO_STRING(SourceDistance),
        '] must not be 0.'))
    );
    RETURN;
END_IF

iConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := SourceDistance,
    DesiredUnits := FocalLengthCompounded.Units,
    ConvertedQuantity => fbSourceDistance
);

IF iConvertUnits.GetError() THEN
    SetError(Msg :=
        CONCAT('Error returned when attempting to convert units of source distance input: ',
        iConvertUnits.GetErrorMsg())
    );
    RETURN;
END_IF

IF NOT bFirstCompound THEN
    fbVirtualSourceDistance.Val := fbSourceDistance.Val - fbPrevSourceDistance.Val - fbFocalLengthCompounded.Val;

    // Check for an invalid virtual source distance.
    IF fbVirtualSourceDistance.Val = 0.0 THEN
        SetError(
            Msg := 'The virtual source is exactly on the lens set: fSourceDistance - fPrevSourceDistance - fFocalLengthCompounded = 0.0'
        );
        RETURN;
    END_IF

    fbFocalLengthCompounded := iCalcImageDistance.Calculate(
        fFocalLength := FocalLength,
        fSourceDistance := fbVirtualSourceDistance
    );
ELSE
    bFirstCompound := FALSE;

    fbFocalLengthCompounded := iCalcImageDistance.Calculate(
        fFocalLength := FocalLength,
        fSourceDistance := SourceDistance
    );
END_IF

fPrevSourceDistance := SourceDistance;

IF iCalcImageDistance.GetError() THEN
    SetError(Msg :=
        CONCAT('Error returned when attempting to calculate the image distance: ',
        iCalcImageDistance.GetErrorMsg())
    );
    RETURN;
END_IF

Compound := fbFocalLengthCompounded;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{2224ebdb-b331-4bf2-8b50-4a64b4eba865}">
      <Declaration><![CDATA[
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)

    iConvertUnits : I_ConvertUnitsLREAL;
    iCalcImageDistance : I_CalcImageDistance;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
THIS^.iConvertUnits := iConvertUnits;
THIS^.iCalcImageDistance := iCalcImageDistance;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{964519e4-1caa-4e37-9ecd-f4a5e090d640}">
      <Declaration><![CDATA[
METHOD Reset
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
bFirstCompound := TRUE;
ClearError();
fbFocalLengthCompounded := 0.0;
fFocalLengthInverse := 0.0;
fVirtualSourceDistance := 0.0;
fVirtualSourceDistanceInverse := 0.0;
fPrevSourceDistance := 0.0;
fSourceDistanceInverse := 0.0;
fbFocalLengthCompounded := 0.0;
fFocalLengthCompoundedInverse := 0.0;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>