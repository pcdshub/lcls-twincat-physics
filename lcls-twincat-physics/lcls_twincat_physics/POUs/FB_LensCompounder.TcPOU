<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_LensCompounder" Id="{f9cc42ed-aeb8-4fef-8be4-9364111ed1a4}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_LensCompounder EXTENDS FB_Fallible IMPLEMENTS I_LensCompounder
VAR
    iConvertUnits : I_ConvertUnitsLREAL;

    bFirstCompound : BOOL := TRUE;
    fbFocalLength1Inverse : FB_QuantityLREALPublic(Units := '1/m');
    fbFocalLength2Inverse : FB_QuantityLREALPublic(Units := '1/m');
    fbFocalLengthCompoundedInverse : FB_QuantityLREALPublic(Units := '1/m');
    fbFocalLength : FB_QuantityLREALPublic(Units := 'm');

    {attribute 'pytmc' := 'pv: FocalLengthCompounded'}
    fbFocalLengthCompounded : FB_QuantityLREALPublic(Units := 'm');
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Compound" Id="{a3ada262-9e56-4d19-98a8-21adb0f78d19}">
      <Declaration><![CDATA[
METHOD Compound
VAR_INPUT
    FocalLength	: I_QuantityLREAL;
    Multiplier	: INT;
END_VAR
VAR_IN_OUT
    FocalLengthCompounded : FB_QuantityLREALPublic(Units := 'm');
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
SetUnits(Units := FocalLengthCompounded.Units);

iConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := FocalLength,
    DesiredUnits := FocalLengthCompounded.Units,
    ConvertedQuantity := fbFocalLength
);

IF iConvertUnits.GetError() THEN
    SetError(Msg :=
        CONCAT('Error returned when attempting to convert units of focal length input: ',
        iConvertUnits.GetErrorMsg())
    );
    FocalLengthCompounded.SetError(Msg := GetErrorMsg());
    RETURN;
END_IF

// Check for an invalid focal length input.
IF fbFocalLength.Val = 0.0 THEN
    SetError(
        Msg := CONCAT('The focal length specified: [',
        CONCAT(LREAL_TO_STRING(fbFocalLength.Val),
        '] must not be 0.'))
    );
    FocalLengthCompounded.SetError(Msg := GetErrorMsg());
    RETURN;
END_IF

// Calculate the inverse of focal length input.
fbFocalLength1Inverse.Val := 1.0 / fbFocalLength.Val;

IF NOT bFirstCompound THEN
    // Check for an invalid compounded focal length.
    IF fbFocalLengthCompounded.Val = 0.0 THEN
        SetError(
            Msg := CONCAT('The current compounded focal length must not be 0: [',
            CONCAT(LREAL_TO_STRING(fbFocalLengthCompounded.Val),
            '] must not be 0.'))
        );
        FocalLengthCompounded.SetError(Msg := GetErrorMsg());
        RETURN;
    END_IF

    // Calculate the inverse of the present compounded focal length.
    fbFocalLength2Inverse.Val := 1.0 / fbFocalLengthCompounded.Val;
ELSE
    bFirstCompound := FALSE;
END_IF

// Check for an invalid multiplier input.
IF Multiplier <= 0 THEN
    SetError(
        Msg := CONCAT('The multiplier specified: [',
        CONCAT(LREAL_TO_STRING(Multiplier),
        '] must be greater than 0.'))
    );
    FocalLengthCompounded.SetError(Msg := GetErrorMsg());
    RETURN;
END_IF

// Calculate the inverse of the compounded focal length.
fbFocalLengthCompoundedInverse.Val := INT_TO_LREAL(Multiplier) * fbFocalLength1Inverse.Val + fbFocalLength2Inverse.Val;

// Check if the resultant inverse compounded focal length is 0. Prevent a divide by 0.
IF fbFocalLengthCompoundedInverse.Val = 0.0 THEN
    SetError(
        Msg := 'The calculated inverse compound focal length was 0 and it must not be 0.'
    );
    FocalLengthCompounded.SetError(Msg := GetErrorMsg());
    RETURN;
END_IF

// Calculate the resultant compounded focal length.
fbFocalLengthCompounded.Val := 1.0 / fbFocalLengthCompoundedInverse.Val;

FocalLengthCompounded := fbFocalLengthCompounded;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{25c61bf4-7f60-40f1-91a6-892c3aa5d9cf}">
      <Declaration><![CDATA[
METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)

    ConvertUnits : I_ConvertUnitsLREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
THIS^.iConvertUnits := ConvertUnits;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetCurrentResult" Id="{794d6c63-1fdf-4c3c-bbe5-8f2e4a4ea833}">
      <Declaration><![CDATA[
METHOD GetCurrentResult
VAR_IN_OUT
    FocalLengthCompounded : FB_QuantityLREALPublic;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
iConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbFocalLengthCompounded,
    DesiredUnits := fbFocalLength.Units,
    ConvertedQuantity := fbFocalLengthCompounded
);

IF iConvertUnits.GetError() THEN
    SetError(Msg :=
        CONCAT('Error returned when attempting to convert units of focal length input: ',
        iConvertUnits.GetErrorMsg())
    );
    FocalLengthCompounded.SetError(Msg := GetErrorMsg());
    RETURN;
END_IF

FocalLengthCompounded := fbFocalLengthCompounded;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{775e5bba-edca-420a-87f5-347a62f686b1}">
      <Declaration><![CDATA[
METHOD Reset
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Initialize focal length and error values.
fbFocalLengthCompounded.Val := 0.0;
fbFocalLength1Inverse.Val := 0.0;
fbFocalLength2Inverse.Val := 0.0;
fbFocalLengthCompoundedInverse.Val := 0.0;
ClearError();
bFirstCompound := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetUnits" Id="{a84cf75b-57ac-4a77-8692-15fad7c3725c}">
      <Declaration><![CDATA[
METHOD PRIVATE SetUnits
VAR_INPUT
    Units : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbFocalLength1Inverse.Units := CONCAT('1/', Units);
fbFocalLength2Inverse.Units := CONCAT('1/', Units);
fbFocalLengthCompoundedInverse.Units := CONCAT('1/', Units);
fbFocalLengthCompounded.Units := Units;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>