<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_CompoundLenses" Id="{f9cc42ed-aeb8-4fef-8be4-9364111ed1a4}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_CompoundLenses IMPLEMENTS I_FallibleLREAL
VAR
    iFocalLength1 : I_FallibleLREAL; // Focal length, in m, of the first lens or group of lenses.
    iMultiplier1 : I_FallibleINT; // Multiplier for the number of contiguous lenses with the first focal length. Default of 1.
    iFocalLength2 : I_FallibleLREAL; // Focal length, in m, of the second lens or group of lenses.
    iMultiplier2 : I_FallibleINT; // Multiplier for the number of contiguous lenses with the second focal length. Default of 1.
    bError : BOOL;
    sErrorMsg : T_MaxString;
    fFocalLength1Inverse : LREAL;
    fFocalLength2Inverse : LREAL;
    fFocalLengthCompoundedInverse : LREAL;
    fFocalLengthCompounded : LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Initialize focal length and error values.
fFocalLengthCompounded := 0.0;
ClearError();

// Check to see if there is an error reported for focal length 1 input.
IF iFocalLength1.GetError() THEN
    SetError(
        sMsg := CONCAT('The input focal length 1 has an error: [',
        CONCAT(iFocalLength1.GetErrorMsg(),
        ']'))
    );
    RETURN;
END_IF

// Check for an invalid focal length 1 input.
IF iFocalLength1.Val = 0.0 THEN
    SetError(
        sMsg := CONCAT('The focal length 1 specified: [',
        CONCAT(LREAL_TO_STRING(iFocalLength1.Val),
        '] must not be 0.'))
    );
    RETURN;
END_IF

// Calculate the inverse of focal length 1.
fFocalLength1Inverse := 1.0 / iFocalLength1.Val;

// Check to see if there is an error reported for focal length 2 input.
IF iFocalLength2.GetError() THEN
    SetError(
        sMsg := CONCAT('The input focal length 2 has an error: [',
        CONCAT(iFocalLength2.GetErrorMsg(),
        ']'))
    );
    RETURN;
END_IF

// Check for an invalid focal length 2 input.
IF iFocalLength2.Val = 0.0 THEN
    SetError(
        sMsg := CONCAT('The focal length 2 specified: [',
        CONCAT(LREAL_TO_STRING(iFocalLength2.Val),
        '] must not be 0.'))
    );
    RETURN;
END_IF

// Calculate the inverse of focal length 2.
fFocalLength2Inverse := 1.0 / iFocalLength2.Val;

// Check to see if there is an error reported for the multiplier 1 input.
IF iMultiplier1.GetError() THEN
    SetError(
        sMsg := CONCAT('The input multiplier 1 has an error: [',
        CONCAT(iMultiplier1.GetErrorMsg(),
        ']'))
    );
    RETURN;
END_IF

// Check for an invalid multiplier 1 input.
IF iMultiplier1.Val <= 0 THEN
    SetError(
        sMsg := CONCAT('The multiplier 1 specified: [',
        CONCAT(LREAL_TO_STRING(iMultiplier1.Val),
        '] must be greater than 0.'))
    );
    RETURN;
END_IF

// Check for an invalid multiplier 2 input.
IF iMultiplier2.Val <= 0 THEN
    SetError(
        sMsg := CONCAT('The multiplier 2 specified: [',
        CONCAT(LREAL_TO_STRING(iMultiplier2.Val),
        '] must be greater than 0.'))
    );
    RETURN;
END_IF

// Check to see if there is an error reported for the multiplier 2 input.
IF iMultiplier2.GetError() THEN
    SetError(
        sMsg := CONCAT('The input multiplier 2 has an error: [',
        CONCAT(iMultiplier2.GetErrorMsg(),
        ']'))
    );
    RETURN;
END_IF

// Calculate the inverse of the compounded focal length.
fFocalLengthCompoundedInverse :=
    INT_TO_LREAL(iMultiplier1.Val) * fFocalLength1Inverse +
    INT_TO_LREAL(iMultiplier2.Val) * fFocalLength2Inverse;

// Check if the resultant inverse compounded focal length is 0. Prevent a divide by 0.
IF fFocalLengthCompoundedInverse = 0.0 THEN
    SetError(
        sMsg := 'The calculated inverse compound focal length was 0 and it must not be 0.'
    );
    RETURN;
END_IF

// Calculate the resultant compounded focal length.
fFocalLengthCompounded := 1.0 / fFocalLengthCompoundedInverse;
]]></ST>
    </Implementation>
    <Method Name="ClearError" Id="{61fd75bb-832d-4937-b604-700bbffd0e3c}">
      <Declaration><![CDATA[
METHOD PRIVATE ClearError
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
bError := FALSE;
sErrorMsg := '';
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{8ba78e50-6a59-4506-9a31-51b244be53e0}">
      <Declaration><![CDATA[
METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
    iFocalLength1 : I_FallibleLREAL; // Focal length, in m, of the first lens or group of lenses.
    iMultiplier1 : I_FallibleINT; // Multiplier for the number of contiguous lenses with the first focal length. Default of 1.
    iFocalLength2 : I_FallibleLREAL; // Focal length, in m, of the second lens or group of lenses.
    iMultiplier2 : I_FallibleINT; // Multiplier for the number of contiguous lenses with the second focal length. Default of 1.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
THIS^.iFocalLength1 := iFocalLength1;
THIS^.iMultiplier1 := iMultiplier1;
THIS^.iFocalLength2 := iFocalLength2;
THIS^.iMultiplier2 := iMultiplier2;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetError" Id="{2372a004-e050-42ee-889f-a2b72d7ac5ba}">
      <Declaration><![CDATA[
METHOD GetError : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetError := bError;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetErrorMsg" Id="{751fc836-3c4d-4476-b0f0-5e465d4aad83}">
      <Declaration><![CDATA[
METHOD GetErrorMsg : T_MaxString
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetErrorMsg := sErrorMsg;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetError" Id="{89a59955-3022-4635-b5de-0eb9457a5a55}">
      <Declaration><![CDATA[
METHOD PRIVATE SetError
VAR_INPUT
    sMsg	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
bError := TRUE;
sErrorMsg := sMsg;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Val" Id="{b52d2f66-64d0-486f-a1ae-76a05eecb008}">
      <Declaration><![CDATA[
PROPERTY Val : LREAL
]]></Declaration>
      <Get Name="Get" Id="{6fabf3e7-9afb-47c4-9ca8-19618629d38d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
Val := fFocalLengthCompounded;
]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>