<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_XRayDelta" Id="{0334636a-5ae2-4305-bdc8-1c2dc0315818}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_XRayDelta IMPLEMENTS I_FallibleLREAL
VAR
    iEnergy : I_FallibleLREAL; // The photon energy of the x-rays in eV.
    if1 : I_FallibleLREAL; // The f1 scattering factor.
    iDensity : I_FallibleLREAL; // The density of the material in g/cm^3.
    iAtomicNumber : I_FallibleINT; // The atomic number of the material.
    iAtomicMass : I_FallibleLREAL; // The atomic mass of the material.
    bError : BOOL;
    sErrorMsg : T_MaxString;
    fLambda : LREAL; // Lambda in cm.
    fPlanckHC : LREAL; // Planck's constant multiplied by speed of light divided my elementary charge. Result in cm / eV.
    fRElectron : LREAL; // Classical electron radius in cm.
    fWeight : LREAL; // The density per mol of the material.
    fDeltaUnscaled : LREAL; // The x-ray delta value before it has been scaled.
    fScale : LREAL; // The scaling factor
    fDelta : LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Initialize delta and error values.
fDelta := 0.0;
ClearError();

// Check to see if there is an error reported for the photon energy input.
IF iEnergy.GetError() THEN
    SetError(
        sMsg := CONCAT('The input photon energy has an error: [',
        CONCAT(iEnergy.GetErrorMsg(),
        ']'))
    );
    RETURN;
END_IF

// Check to make sure the photon energy is a nonzero, positive number before attempting to divide by it.
IF iEnergy.Val <= 0.0 THEN
    SetError(
        sMsg := CONCAT('The photon energy specified: [',
        CONCAT(LREAL_TO_STRING(iEnergy.Val),
        '] must be greater than 0.'))
    );
    RETURN;
END_IF

// Calculate some values needed for computing the index of refraction.
fPlanckHC := 1e10 * GVL_PhysicalConstants.fPlanckConstant_in_J_Hz_1 * GVL_PhysicalConstants.fSpeedOfLightInVacuum_in_m_s_1 / GVL_PhysicalConstants.fElementaryCharge_in_C; // cm / eV
fLambda := 1e-8 * fPlanckHC / iEnergy.Val; // cm
fRElectron := 100 * GVL_PhysicalConstants.fClassicalElectronRadius_in_m; // cm

// Check to see if there is an error reported for the density input.
IF iDensity.GetError() THEN
    SetError(
        sMsg := CONCAT('The input density has an error: [',
        CONCAT(iDensity.GetErrorMsg(),
        ']'))
    );
    RETURN;
END_IF

// Check to make sure the density is a nonzero, positive number.
IF iDensity.Val <= 0.0 THEN
    SetError(
        sMsg := CONCAT('The density specified: [',
        CONCAT(LREAL_TO_STRING(iDensity.Val),
        '] must be greater than 0.'))
    );
    RETURN;
END_IF

fWeight := iDensity.Val * GVL_PhysicalConstants.fAvogadroConstant_in_mol_1;

// Check to see if there is an error reported for the atomic number input.
IF iAtomicNumber.GetError() THEN
    SetError(
        sMsg := CONCAT('The input atomic number has an error: [',
        CONCAT(iAtomicNumber.GetErrorMsg(),
        ']'))
    );
    RETURN;
END_IF

// Check to make sure the atomic number is a nonzero, positive number.
IF iAtomicNumber.Val <= 0 THEN
    SetError(
        sMsg := CONCAT('The atomic number specified: [',
        CONCAT(LREAL_TO_STRING(iAtomicNumber.Val),
        '] must be greater than 0.'))
    );
    RETURN;
END_IF

// Check to see if there is an error reported for the f1 input.
IF if1.GetError() THEN
    SetError(
        sMsg := CONCAT('The input f1 has an error: [',
        CONCAT(if1.GetErrorMsg(),
        ']'))
    );
    RETURN;
END_IF

fDeltaUnscaled := fWeight * (INT_TO_LREAL(iAtomicNumber.Val) + if1.Val);

// Check to see if there is an error reported for the atomic mass input.
IF iAtomicMass.GetError() THEN
    SetError(
        sMsg := CONCAT('The input atomic mass has an error: [',
        CONCAT(iAtomicMass.GetErrorMsg(),
        ']'))
    );
    RETURN;
END_IF

// Check to make sure the atomic mass is a nonzero, positive number.
IF iAtomicMass.Val <= 0.0 THEN
    SetError(
        sMsg := CONCAT('The atomic mass specified: [',
        CONCAT(LREAL_TO_STRING(iAtomicMass.Val),
        '] must be greater than 0.'))
    );
    RETURN;
END_IF

fScale := fLambda * fLambda * fRElectron / (2 * 3.1415926535 * iAtomicMass.Val);
fDelta := fDeltaUnscaled * fScale;
]]></ST>
    </Implementation>
    <Method Name="ClearError" Id="{bde62d19-da16-45f0-a239-4054fd030517}">
      <Declaration><![CDATA[
METHOD PRIVATE ClearError
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
bError := FALSE;
sErrorMsg := '';
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{ff1f27e8-e214-4d14-afe7-c319064f044c}">
      <Declaration><![CDATA[
METHOD FB_init : BOOL
VAR_INPUT
    bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
    bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)

    iEnergy : I_FallibleLREAL; // The photon energy of the x-rays in eV.
    if1 : I_FallibleLREAL; // The f1 scattering factor.
    iDensity : I_FallibleLREAL; // The density of the material in g/cm^3.
    iAtomicNumber : I_FallibleINT; // The atomic number of the material.
    iAtomicMass : I_FallibleLREAL; // The atomic mass of the material.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
THIS^.iEnergy := iEnergy;
THIS^.if1 := if1;
THIS^.iDensity := iDensity;
THIS^.iAtomicNumber := iAtomicNumber;
THIS^.iAtomicMass := iAtomicMass;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetError" Id="{181d3611-1525-4e50-9c08-19e15367cc79}">
      <Declaration><![CDATA[
METHOD GetError : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetError := bError;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetErrorMsg" Id="{5e4401d1-1d00-4794-b6b8-fe811b253260}">
      <Declaration><![CDATA[
METHOD GetErrorMsg : T_MaxString
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
GetErrorMsg := sErrorMsg;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetError" Id="{0c0b27a5-f66e-45c7-8c76-1cb2e2b46b60}">
      <Declaration><![CDATA[
METHOD PRIVATE SetError
VAR_INPUT
    sMsg	: Tc2_System.T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
bError := TRUE;
sErrorMsg := sMsg;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Val" Id="{3d6bfdfb-80f6-4a41-8900-8a1882140880}">
      <Declaration><![CDATA[
PROPERTY Val : LREAL
]]></Declaration>
      <Get Name="Get" Id="{27789fe1-952d-4197-a4ba-c94d333b2af2}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
Val := fDelta;
]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>