<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_Lens" Id="{4a31c30d-ca3e-4cb7-bedc-d5a5413a2a83}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_Lens IMPLEMENTS I_Lens
VAR
    {attribute 'pytmc' := '
        pv: Delta
        io: i
    '}
    fDelta : LREAL;

    {attribute 'pytmc' := '
        pv: Error
        io: i
    '}
    bError : BOOL;

    {attribute 'pytmc' := '
        pv: f1
        io: i
    '}
    fF1 : LREAL;

    {attribute 'pytmc' := '
        pv: FocalLength
        io: i
    '}
    fFocalLength : LREAL;

    {attribute 'pytmc' := '
        pv: Energy
        io: io
    '}
    fEnergy : LREAL;

    {attribute 'pytmc' := '
        pv: Radius
        io: io
    '}
    fRadius : LREAL;

    {attribute 'pytmc' := '
        pv: Multiplier
        io: io
    '}
    nMultiplier : INT;

    {attribute 'pytmc' := '
        pv: ErrorMsg
        io: i
    '}
    sErrorMsg : T_MaxString;

    {attribute 'pytmc' := 'pv: Material'}
    fbMaterial : FB_Element;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="Delta" Id="{953307c9-701a-489d-bb16-3ab7bbcd9dab}">
      <Declaration><![CDATA[
PROPERTY Delta : LREAL
]]></Declaration>
      <Get Name="Get" Id="{9dc56aac-ad27-4ad2-8159-763355bf3777}">
        <Declaration><![CDATA[
VAR
    fbXRayDelta : FB_XRayDelta;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
fbXRayDelta(
    fEnergy := Energy,
    fF1 := f1,
    fDensity := fbMaterial.Density,
    nAtomicNumber := fbMaterial.Protons,
    fAtomicMass := fbMaterial.Mass,
    fDelta =>,
    bError =>,
    sErrorMsg =>
);

IF fbXRayDelta.bError THEN
    bError := TRUE;
    sErrorMsg := fbXRayDelta.sErrorMsg;
ELSE
    fDelta := fbXRayDelta.fDelta;
END_IF

Delta := fDelta;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Energy" Id="{241c4d6d-a08b-4aaf-94a8-16094f2379be}">
      <Declaration><![CDATA[
PROPERTY Energy : LREAL
]]></Declaration>
      <Get Name="Get" Id="{e154584a-9896-4183-8b97-09943c7dafe4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
// Check for a negative photon energy.
IF fEnergy < 0.0 THEN
    // If we have an invalid photon energy value, give an error.
    bError := TRUE;
    sErrorMsg := CONCAT('Invalid photon energy value of: [',
        CONCAT(LREAL_TO_STRING(fEnergy),
        ']. Must be greater than or equal to 0.'));
END_IF

Energy := fEnergy;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3f4d6ab6-fe4a-4712-841e-47e0eefbdb7b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
fEnergy := Energy;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Error" Id="{6d034299-a490-4dad-8873-8a89e1e2c6fa}">
      <Declaration><![CDATA[
PROPERTY Error : BOOL
]]></Declaration>
      <Get Name="Get" Id="{c876d34c-4b2f-410b-80ff-69b10dc64f40}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
Error := bError;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="ErrorMsg" Id="{02a33bd4-467c-45af-a0ce-3613e5502284}">
      <Declaration><![CDATA[
PROPERTY ErrorMsg : T_MaxString
]]></Declaration>
      <Get Name="Get" Id="{c522b1a1-236a-4345-a7bc-997738e3275d}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
ErrorMsg := sErrorMsg;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="f1" Id="{2300ba17-2d98-4b84-ad62-0f58fef3ee00}">
      <Declaration><![CDATA[
PROPERTY f1 : LREAL
]]></Declaration>
      <Get Name="Get" Id="{44a05807-f5cd-4918-9627-89f90a4b9efa}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
GVL_Physics.fbScatteringFactors(
     sTableName := fbMaterial.Name,
     fEnergyEV := Energy,
     f1 =>,
     bError =>,
     bFound =>,
     bDone =>,
     fTableLookupLow =>,
     fTableLookupHigh =>
);

// Check for an error in retrieving the scattering factor.
IF GVL_Physics.fbScatteringFactors.bDone THEN
    IF GVL_Physics.fbScatteringFactors.bError THEN
        bError := TRUE;
        IF GVL_Physics.fbScatteringFactors.bFound THEN
            // Done but not found and had an error meaning there is no table for the name provided.
            sErrorMsg := CONCAT('The element name provided: [',
                CONCAT(fbMaterial.Name,
                '] does not have a scattering lookup table defined for it.'));
        ELSE
            // Done and found but had an error meaning the table data is flawed.
            sErrorMsg := CONCAT('Detected that the table for the provided element name [',
                CONCAT(fbMaterial.Name,
                '] is not strictly increasing in photon energy with row number. The table is malformed.'));
        END_IF
    ELSIF GVL_Physics.fbScatteringFactors.bFound THEN
        // Done and found and no error meaning we got a valid f1 scattering factor.
        fF1 := GVL_Physics.fbScatteringFactors.f1;
    ELSE
        // Done and no internal error but not found meaning the photon energy exceeds the bounds of our table.
        bError := TRUE;
        IF fEnergy < GVL_Physics.fbScatteringFactors.fTableLookupLow THEN
            sErrorMsg := CONCAT('The photon energy [',
                CONCAT(LREAL_TO_STRING(Energy),
                CONCAT(' eV] provided is lower than the scattering factor lookup table has data for. The lowest table value is: [',
                CONCAT(LREAL_TO_STRING(GVL_Physics.fbScatteringFactors.fTableLookupLow),
                ' eV]'))));
        ELSIF fEnergy > GVL_Physics.fbScatteringFactors.fTableLookupHigh THEN
            sErrorMsg := CONCAT('The photon energy [',
                CONCAT(LREAL_TO_STRING(fEnergy),
                CONCAT(' eV] provided is higher than the scattering factor lookup table has data for. The highest table value is: [',
                CONCAT(LREAL_TO_STRING(GVL_Physics.fbScatteringFactors.fTableLookupHigh),
                ' eV]'))));
        END_IF
    END_IF
END_IF

f1 := fF1;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="FocalLength" Id="{dc08c5d9-57d2-4db2-b9d6-81a3f093c3a7}">
      <Declaration><![CDATA[
PROPERTY FocalLength : LREAL
]]></Declaration>
      <Get Name="Get" Id="{90f636aa-67bc-466a-8b61-824902ec7a95}">
        <Declaration><![CDATA[
VAR
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLens;
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
fbCalcFocalLengthSingleLens(
    fDelta := Delta,
    fRadius := Radius,
    fFocalLength =>,
    bError =>,
    sErrorMsg =>
);

IF fbCalcFocalLengthSingleLens.bError THEN
    bError := TRUE;
    sErrorMsg := fbCalcFocalLengthSingleLens.sErrorMsg;
ELSE
    fFocalLength := fbCalcFocalLengthSingleLens.fFocalLength;
END_IF

FocalLength := fFocalLength;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Material" Id="{23cb63db-07d0-4116-ab90-923d7879ff4f}">
      <Declaration><![CDATA[
PROPERTY Material : FB_Element
]]></Declaration>
      <Get Name="Get" Id="{da72f42c-3df6-4714-a29b-6bc43cdfb118}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
Material := fbMaterial;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{6ce73d05-2462-44ce-8e89-d88b495103ed}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
fbMaterial := Material;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Multiplier" Id="{98fc8c2e-c6d7-409d-b4a9-db30074d0ee6}">
      <Declaration><![CDATA[
PROPERTY Multiplier : INT
]]></Declaration>
      <Get Name="Get" Id="{a9863f33-2967-4a47-beed-f3a5c59bf8dd}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
// Check for an invalid multiplier.
IF nMultiplier <= 0 THEN
    // If we have an invalid multiplier value, give an error.
    bError := TRUE;
    sErrorMsg := CONCAT('Invalid multiplier value of: [',
        CONCAT(LREAL_TO_STRING(nMultiplier),
        ']. Must be greater than 0.'));
END_IF

Multiplier := nMultiplier;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d57ed44a-0934-4031-a8c3-de43028beb6a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
nMultiplier := Multiplier;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="Radius" Id="{3104537e-912b-4e56-9c53-aa6b3018a730}">
      <Declaration><![CDATA[
PROPERTY Radius : LREAL
]]></Declaration>
      <Get Name="Get" Id="{cccdf607-9ba6-4470-aaaa-400a0e58cdb1}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
// Check for an invalid radius of curvature.
IF fRadius <= 0.0 THEN
    // If we have an invalid radius value, give an error.
    bError := TRUE;
    sErrorMsg := CONCAT('Invalid radius of curvature value of: [',
        CONCAT(LREAL_TO_STRING(fRadius),
        ']. Must be greater than 0.'));
END_IF

Radius := fRadius;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{0fb7c51b-5b18-405a-8d02-c569f9ba7a4c}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
fRadius := Radius;
]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>