<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_LensSet" Id="{9055d704-4d25-40c5-873f-804fc0b293d8}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_LensSet EXTENDS FB_Fallible IMPLEMENTS I_LensSet
VAR
    fbRadius : FB_QuantityLREALPublic(Units := 'm');
    fbLens : FB_Lens;

    afbLens : ARRAY [1..GVL_Physics.nMaxNumLensesInSet] OF FB_Lens;
    nNumLenses : INT;

    nIndex : INT;
    fbLensToCompare : FB_Lens;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Copy" Id="{3821df4e-e750-4186-9812-ba052484d4f4}">
      <Declaration><![CDATA[
METHOD Copy
VAR_INPUT
    LensSet : I_LensSet;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ClearError();

IF LensSet.GetError() THEN
    SetError(
        Msg := CONCAT('The input lens set has the following error message: [',
        CONCAT(LensSet.GetErrorMsg(),
        ']'))
    );
    RETURN;
END_IF

IF LensSet.NumLenses < 1 THEN
    SetError(Msg := 'The input lens set has less than 1 lens.');
    RETURN;
END_IF

FOR nIndex := 1 TO LensSet.NumLenses BY 1 DO
    LensSet.GetLens(LensNum := nIndex, Lens := fbLens);

    IF LensSet.GetError() THEN
        SetError(
            Msg := CONCAT('The input lens set has the following error message after getting a lens: [',
            CONCAT(LensSet.GetErrorMsg(),
            ']'))
        );
        RETURN;
    END_IF

    afbLens[nIndex] := fbLens;

    nNumLenses := nIndex;
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Equals" Id="{95cb53e2-d03a-4c63-9880-4637e39a1ba5}">
      <Declaration><![CDATA[
METHOD Equals : BOOL
VAR_INPUT
    LensSet : I_LensSet;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
Equals := TRUE;

IF LensSet.NumLenses <> NumLenses THEN
    Equals := FALSE;

    RETURN;
END_IF

FOR nIndex := 1 TO NumLenses BY 1 DO
    GetLens(LensNum := nIndex, Lens := fbLens);

    LensSet.GetLens(LensNum := nIndex, Lens := fbLensToCompare);

    IF NOT fbLens.Equals(Lens := fbLensToCompare) THEN
        Equals := FALSE;

        RETURN;
    END_IF
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetLens" Id="{9e1ed0e8-5daa-4afd-85a9-a0c8ba1a6071}">
      <Declaration><![CDATA[
METHOD GetLens
VAR_INPUT
    LensNum	: INT;
END_VAR
VAR_IN_OUT
    Lens	: FB_Lens;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ClearError();

IF NOT IndexInRange(LensNum) THEN
    SetError(Msg := IndexOutOfRangeErrorMsg(nLensNum := LensNum));
    RETURN;
END_IF

Lens := afbLens[LensNum];]]></ST>
      </Implementation>
    </Method>
    <Method Name="IndexInRange" Id="{736b6ca6-387b-4727-80f6-b6d61a70ddd3}">
      <Declaration><![CDATA[
METHOD IndexInRange : BOOL
VAR_INPUT
    nIndex : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IndexInRange := nIndex > 0 AND nIndex <= NumLenses;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IndexOutOfRangeErrorMsg" Id="{b2d5c30b-5f25-4b92-8eb7-0371b1cc775a}">
      <Declaration><![CDATA[
METHOD IndexOutOfRangeErrorMsg : T_MaxString
VAR_INPUT
    nLensNum : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IndexOutOfRangeErrorMsg :=
        CONCAT('Requested index is out of the allowable range. ',
        CONCAT('0 < [',
        CONCAT(INT_TO_STRING(nLensNum),
        CONCAT('] <= ',
        CONCAT(INT_TO_STRING(NumLenses),
        ' is not true.')))));]]></ST>
      </Implementation>
    </Method>
    <Property Name="NumLenses" Id="{1ababeff-88b4-4598-8f6f-5898604237f0}">
      <Declaration><![CDATA[
PROPERTY NumLenses : INT
]]></Declaration>
      <Get Name="Get" Id="{a045bb85-1352-478d-b38c-0658422571a9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
NumLenses := nNumLenses;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{79ab4a51-2bc8-4a47-ab7e-f9e6958d9160}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[
IF NumLenses > 0 AND NumLenses <= GVL_Physics.nMaxNumLensesInSet THEN
    nNumLenses := NumLenses;
ELSE
    SetError(Msg := CONCAT('Attempted to set number of lenses to: [',
        CONCAT(INT_TO_STRING(NumLenses),
        CONCAT('] which does not meet the criteria: 0 < NumLenses <= GVL_Physics.nMaxNumLensesInSet = [',
        CONCAT(INT_TO_STRING(GVL_Physics.nMaxNumLensesInSet),
        ']'))))
    );
END_IF
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="SetLens" Id="{d2a31209-d8ac-4b1d-a13e-7d8ca7bdb34d}">
      <Declaration><![CDATA[
METHOD SetLens
VAR_INPUT
    Lens : I_Lens;
    LensNum : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
ClearError();

IF NOT IndexInRange(LensNum) THEN
    SetError(Msg := IndexOutOfRangeErrorMsg(nLensNum := LensNum));
    RETURN;
END_IF

fbLens.Copy(Lens);

IF fbLens.GetError() THEN
    SetError(
        Msg := CONCAT('The input lens has the following error message: [',
        CONCAT(fbLens.GetErrorMsg(),
        ']'))
    );
    RETURN;
END_IF

afbLens[LensNum] := fbLens;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>