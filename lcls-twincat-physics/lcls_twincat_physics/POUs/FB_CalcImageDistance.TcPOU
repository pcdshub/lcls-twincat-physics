<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_CalcImageDistance" Id="{85972a9f-836a-4795-bb47-ce7ac4834d74}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_CalcImageDistance EXTENDS FB_Fallible IMPLEMENTS I_CalcImageDistance
VAR
    fFocalLengthInverse : LREAL;
    fSourceDistanceInverse : LREAL;
    fImageDistanceInverse : LREAL;
    fImageDistance : LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Calculate" Id="{24dc5037-bbac-4834-9c1a-8a671b6b88cd}">
      <Declaration><![CDATA[
METHOD Calculate : LREAL
VAR_INPUT
    fFocalLength : LREAL; // The focal length, in meters.
    fSourceDistance : LREAL; // The distance, in meters, from the source to the lens.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Initialize image distance and error values.
fImageDistance := 0.0;
ClearError();

// Check for an invalid focal length input.
IF fFocalLength = 0.0 THEN
    SetError(
        sMsg := CONCAT('The focal length specified: [',
        CONCAT(LREAL_TO_STRING(fFocalLength),
        '] must not be 0.'))
    );
    RETURN;
END_IF

fFocalLengthInverse := 1.0 / fFocalLength;

// Check for an invalid source distance input.
IF fSourceDistance = 0.0 THEN
    SetError(
        sMsg := CONCAT('The source distance specified: [',
        CONCAT(LREAL_TO_STRING(fSourceDistance),
        '] must not be 0.'))
    );
    RETURN;
END_IF

fSourceDistanceInverse := 1.0 / fSourceDistance;

fImageDistanceInverse := fFocalLengthInverse - fSourceDistanceInverse;

// Check for an invalid inverted image distance.
IF fImageDistanceInverse = 0.0 THEN
    SetError(
        sMsg := CONCAT('The calculated inverse image distance: [',
        CONCAT(LREAL_TO_STRING(fImageDistanceInverse),
        '] must not be 0.'))
    );
    RETURN;
END_IF

fImageDistance := 1.0 / fImageDistanceInverse;

Calculate := fImageDistance;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>