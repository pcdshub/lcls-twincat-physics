<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_CalcFocalLengthSingleLens_Test" Id="{84e8e88f-6983-4e91-9ebc-dec0075a6cd5}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_CalcFocalLengthSingleLens_Test EXTENDS TcUnit.FB_TestSuite
VAR
    nTestID : INT;
    fbDelta : FB_FallibleLREAL;
    fbRadius : FB_FallibleLREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
nTestID := 0;

fbDelta.Val := 0.0;
fbDelta.ClearError();
fbRadius.Val := 1.0;
fbRadius.ClearError();
TestInvalidInputExpectError0FocalLength(
    iDelta := fbDelta,
    iRadius := fbRadius
);

fbDelta.Val := 1.0;
fbDelta.SetError(sMsg := 'Test');
fbRadius.Val := 1.0;
fbRadius.ClearError();
TestInvalidInputExpectError0FocalLength(
    iDelta := fbDelta,
    iRadius := fbRadius
);

fbDelta.Val := 1.0;
fbDelta.ClearError();
fbRadius.Val := 0.0;
fbRadius.ClearError();
TestInvalidInputExpectError0FocalLength(
    iDelta := fbDelta,
    iRadius := fbRadius
);

fbDelta.Val := 1.0;
fbDelta.ClearError();
fbRadius.Val := -20.0;
fbRadius.ClearError();
TestInvalidInputExpectError0FocalLength(
    iDelta := fbDelta,
    iRadius := fbRadius
);

fbDelta.Val := 1.0;
fbDelta.ClearError();
fbRadius.Val := -20.0;
fbRadius.SetError(sMsg := 'Test');
TestInvalidInputExpectError0FocalLength(
    iDelta := fbDelta,
    iRadius := fbRadius
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 1.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 0.005621922785393444,
    fRadius := 0.0001,
    fExpected := 0.008893754309452119
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 2.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 0.005621922785393444,
    fRadius := 0.0051,
    fExpected := 0.45358146978205804
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 3.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 1.7147402940032417e-06,
    fRadius := 0.0001,
    fExpected := 29.15893454819898
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 4.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 1.7147402940032417e-06,
    fRadius := 0.0051,
    fExpected := 1487.105661958148
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 5.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 4.316182378185529e-07,
    fRadius := 0.0001,
    fExpected := 115.84311231310711
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 6.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 4.316182378185529e-07,
    fRadius := 0.0051,
    fExpected := 5907.998727968463
);
]]></ST>
    </Implementation>
    <Method Name="TestInvalidInputExpectError0FocalLength" Id="{1f8e00a3-0729-46b9-a59a-8487054c78d2}">
      <Declaration><![CDATA[
METHOD TestInvalidInputExpectError0FocalLength
VAR_INPUT
    iDelta : I_FallibleLREAL;
    iRadius : I_FallibleLREAL;
END_VAR
VAR
    fbFocalLength : FB_FallibleLREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(CONCAT('TestInvalidInputExpectError0FocalLength ID: ',
    INT_TO_STRING(nTestID))
);

F_CalcFocalLengthSingleLens(
    iDelta := fbDelta,
    iRadius := fbRadius,
    fbFocalLength => fbFocalLength,
);

AssertTrue(
    Condition := fbFocalLength.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbFocalLength.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbFocalLength.Val,
    Delta := 0,
    Message := 'Calculated focal length should be 0 when an error is detected.'
);

TEST_FINISHED();

nTestID := nTestID + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValidInputsExpectNoErrorAccurateFocalLength" Id="{9e7e0620-b4ab-4e63-adf5-977fffee39e5}">
      <Declaration><![CDATA[
METHOD TestValidInputsExpectNoErrorAccurateFocalLength
VAR_INPUT
    fDelta : LREAL;
    fRadius : LREAL;

    fExpected : LREAL;
END_VAR
VAR
    fbDelta : FB_FallibleLREAL;
    fbRadius : FB_FallibleLREAL;
    fbFocalLength : FB_FallibleLREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(CONCAT('TestValidInputsExpectNoErrorAccurateFocalLength ID: ',
    INT_TO_STRING(nTestID))
);

fbDelta.Val := fDelta;
fbDelta.ClearError();

fbRadius.Val := fRadius;
fbRadius.ClearError();

F_CalcFocalLengthSingleLens(
    iDelta := fbDelta,
    iRadius := fbRadius,
    fbFocalLength => fbFocalLength,
);

AssertFalse(
    Condition := fbFocalLength.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertFalse(
    Condition := fbFocalLength.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertEquals_LREAL(
    Expected := fExpected,
    Actual := fbFocalLength.Val,
    Delta := ABS(0.001 * fExpected),
    Message := 'Calculated focal length did not calculate close enough to the expected value.'
);

TEST_FINISHED();

nTestID := nTestID + 1;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>