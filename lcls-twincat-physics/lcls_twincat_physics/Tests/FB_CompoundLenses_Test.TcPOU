<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_CompoundLenses_Test" Id="{f7d35265-95ed-426e-abbf-8e10febba493}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_CompoundLenses_Test EXTENDS TcUnit.FB_TestSuite
VAR
    nTestID : INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
nTestID := 0;

Test0FocalLength1ExpectError0FocalLength();

Test0FocalLength2ExpectError0FocalLength();

Test0Multiplier1ExpectError0FocalLength();

Test0Multiplier2ExpectError0FocalLength();

TestInvalidFocalLength1ExpectError0FocalLength();

TestInvalidFocalLength2ExpectError0FocalLength();

TestInvalidMultiplier1ExpectError0FocalLength();

TestInvalidMultiplier2ExpectError0FocalLength();

TestNegMultiplier1ExpectError0FocalLength();

TestNegMultiplier2ExpectError0FocalLength();

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 1.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 1,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 1,
    fExpected := 0.004446877154726059
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 2.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 1,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 2,
    fExpected := 0.002964584769817373
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 3.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 2,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 1,
    fExpected := 0.002964584769817373
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 4.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 2,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 2,
    fExpected := 0.0022234385773630297
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 5.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 1,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 1,
    fExpected := 0.008722720572731886
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 6.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 1,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 2,
    fExpected := 0.008558140939284115
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 7.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 2,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 1,
    fExpected := 0.004403703590117068
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 8.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 2,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 2,
    fExpected := 0.004361360286365943
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 9.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 1,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 1,
    fExpected := 0.008722720572731886
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 10.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 1,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 2,
    fExpected := 0.004403703590117068
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 11.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 2,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 1,
    fExpected := 0.008558140939284115
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 12.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 2,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 2,
    fExpected := 0.004361360286365943
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 13.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 1,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 1,
    fExpected := 0.22679073489102902
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 14.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 1,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 2,
    fExpected := 0.15119382326068603
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 15.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 2,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 1,
    fExpected := 0.15119382326068603
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 16.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 2,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 2,
    fExpected := 0.11339536744551451
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 17.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 1,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 1,
    fExpected := 16.721597402305513
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 18.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 1,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 2,
    fExpected := 11.147731601537009
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 19.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 2,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 1,
    fExpected := 11.147731601537009
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 20.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 2,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 2,
    fExpected := 8.360798701152756
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 21.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 1,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 1,
    fExpected := 32.80005644298389
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 22.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 1,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 2,
    fExpected := 32.18118745349363
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 23.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 2,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 1,
    fExpected := 16.559251796457886
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 24.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 2,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 2,
    fExpected := 16.400028221491944
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 25.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 1,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 1,
    fExpected := 32.80005644298389
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 26.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 1,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 2,
    fExpected := 16.559251796457886
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 27.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 2,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 1,
    fExpected := 32.18118745349363
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 28.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 2,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 2,
    fExpected := 16.400028221491944
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 29.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 1,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 1,
    fExpected := 852.8014675175812
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 30.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 1,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 2,
    fExpected := 568.5343116783874
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 31.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 2,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 1,
    fExpected := 568.5343116783874
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 32.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 2,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 2,
    fExpected := 426.4007337587906
);
]]></ST>
    </Implementation>
    <Method Name="SetInitialFocalLengthAndMultiplierValues" Id="{f62845a8-1909-4af0-8458-0886733e98fd}">
      <Declaration><![CDATA[
METHOD PRIVATE SetInitialFocalLengthAndMultiplierValues
VAR_IN_OUT
    fbFallibleLREALFocalLength1 : FB_FallibleLREALMock;
    fbFallibleLREALFocalLength2 : FB_FallibleLREALMock;
    fbFallibleINTMultiplier1 : FB_FallibleINTMock;
    fbFallibleINTMultiplier2 : FB_FallibleINTMock;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbFallibleLREALFocalLength1.Val := 1.0;
fbFallibleLREALFocalLength1.ClearError();

fbFallibleLREALFocalLength2.Val := 1.0;
fbFallibleLREALFocalLength2.ClearError();

fbFallibleINTMultiplier1.Val := 1;
fbFallibleINTMultiplier1.ClearError();

fbFallibleINTMultiplier2.Val := 1;
fbFallibleINTMultiplier2.ClearError();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test0FocalLength1ExpectError0FocalLength" Id="{b281f112-8ce2-43a7-9e96-9df05b42c757}">
      <Declaration><![CDATA[
METHOD Test0FocalLength1ExpectError0FocalLength
VAR
    fbFallibleLREALFocalLength1Mock : FB_FallibleLREALMock;
    fbFallibleLREALFocalLength2Mock : FB_FallibleLREALMock;
    fbFallibleINTMultiplier1Mock : FB_FallibleINTMock;
    fbFallibleINTMultiplier2Mock : FB_FallibleINTMock;
    // Subject under test
    fbCompoundLenses : FB_CompoundLenses(iFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         iFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         iMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         iMultiplier2 := fbFallibleINTMultiplier2Mock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('Test0FocalLength1ExpectError0FocalLength');

// Test fixture
SetInitialFocalLengthAndMultiplierValues(fbFallibleLREALFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         fbFallibleLREALFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         fbFallibleINTMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         fbFallibleINTMultiplier2 := fbFallibleINTMultiplier2Mock);
fbFallibleLREALFocalLength1Mock.Val := 0.0;

// Here the test starts
fbCompoundLenses();

AssertTrue(
    Condition := fbCompoundLenses.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCompoundLenses.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCompoundLenses.Val,
    Delta := 0,
    Message := 'Calculated focal length compounded should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test0FocalLength2ExpectError0FocalLength" Id="{ef175e1c-2bfd-4d50-a703-793f5b8dd469}">
      <Declaration><![CDATA[
METHOD Test0FocalLength2ExpectError0FocalLength
VAR
    fbFallibleLREALFocalLength1Mock : FB_FallibleLREALMock;
    fbFallibleLREALFocalLength2Mock : FB_FallibleLREALMock;
    fbFallibleINTMultiplier1Mock : FB_FallibleINTMock;
    fbFallibleINTMultiplier2Mock : FB_FallibleINTMock;
    // Subject under test
    fbCompoundLenses : FB_CompoundLenses(iFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         iFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         iMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         iMultiplier2 := fbFallibleINTMultiplier2Mock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('Test0FocalLength2ExpectError0FocalLength');

// Test fixture
SetInitialFocalLengthAndMultiplierValues(fbFallibleLREALFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         fbFallibleLREALFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         fbFallibleINTMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         fbFallibleINTMultiplier2 := fbFallibleINTMultiplier2Mock);
fbFallibleLREALFocalLength2Mock.Val := 0.0;

// Here the test starts
fbCompoundLenses();

AssertTrue(
    Condition := fbCompoundLenses.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCompoundLenses.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCompoundLenses.Val,
    Delta := 0,
    Message := 'Calculated focal length compounded should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test0Multiplier1ExpectError0FocalLength" Id="{07524415-12aa-410c-946c-4f8ae36284dd}">
      <Declaration><![CDATA[
METHOD Test0Multiplier1ExpectError0FocalLength
VAR
    fbFallibleLREALFocalLength1Mock : FB_FallibleLREALMock;
    fbFallibleLREALFocalLength2Mock : FB_FallibleLREALMock;
    fbFallibleINTMultiplier1Mock : FB_FallibleINTMock;
    fbFallibleINTMultiplier2Mock : FB_FallibleINTMock;
    // Subject under test
    fbCompoundLenses : FB_CompoundLenses(iFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         iFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         iMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         iMultiplier2 := fbFallibleINTMultiplier2Mock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('Test0Multiplier1ExpectError0FocalLength');

// Test fixture
SetInitialFocalLengthAndMultiplierValues(fbFallibleLREALFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         fbFallibleLREALFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         fbFallibleINTMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         fbFallibleINTMultiplier2 := fbFallibleINTMultiplier2Mock);
fbFallibleINTMultiplier1Mock.Val := 0;

// Here the test starts
fbCompoundLenses();

AssertTrue(
    Condition := fbCompoundLenses.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCompoundLenses.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCompoundLenses.Val,
    Delta := 0,
    Message := 'Calculated focal length compounded should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test0Multiplier2ExpectError0FocalLength" Id="{74c1bf24-bf98-4d99-8d91-1f35ad6d555f}">
      <Declaration><![CDATA[
METHOD Test0Multiplier2ExpectError0FocalLength
VAR
    fbFallibleLREALFocalLength1Mock : FB_FallibleLREALMock;
    fbFallibleLREALFocalLength2Mock : FB_FallibleLREALMock;
    fbFallibleINTMultiplier1Mock : FB_FallibleINTMock;
    fbFallibleINTMultiplier2Mock : FB_FallibleINTMock;
    // Subject under test
    fbCompoundLenses : FB_CompoundLenses(iFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         iFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         iMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         iMultiplier2 := fbFallibleINTMultiplier2Mock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('Test0Multiplier2ExpectError0FocalLength');

// Test fixture
SetInitialFocalLengthAndMultiplierValues(fbFallibleLREALFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         fbFallibleLREALFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         fbFallibleINTMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         fbFallibleINTMultiplier2 := fbFallibleINTMultiplier2Mock);
fbFallibleINTMultiplier2Mock.Val := 0;

// Here the test starts
fbCompoundLenses();

AssertTrue(
    Condition := fbCompoundLenses.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCompoundLenses.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCompoundLenses.Val,
    Delta := 0,
    Message := 'Calculated focal length compounded should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestInvalidFocalLength1ExpectError0FocalLength" Id="{c72188cd-a5fa-4b5b-a0b3-5a176a527991}">
      <Declaration><![CDATA[
METHOD TestInvalidFocalLength1ExpectError0FocalLength
VAR
    fbFallibleLREALFocalLength1Mock : FB_FallibleLREALMock;
    fbFallibleLREALFocalLength2Mock : FB_FallibleLREALMock;
    fbFallibleINTMultiplier1Mock : FB_FallibleINTMock;
    fbFallibleINTMultiplier2Mock : FB_FallibleINTMock;
    // Subject under test
    fbCompoundLenses : FB_CompoundLenses(iFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         iFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         iMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         iMultiplier2 := fbFallibleINTMultiplier2Mock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestInvalidFocalLength1ExpectError0FocalLength');

// Test fixture
SetInitialFocalLengthAndMultiplierValues(fbFallibleLREALFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         fbFallibleLREALFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         fbFallibleINTMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         fbFallibleINTMultiplier2 := fbFallibleINTMultiplier2Mock);
fbFallibleLREALFocalLength1Mock.SetError(sMsg := 'Error');

// Here the test starts
fbCompoundLenses();

AssertTrue(
    Condition := fbCompoundLenses.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCompoundLenses.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCompoundLenses.Val,
    Delta := 0,
    Message := 'Calculated focal length compounded should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestInvalidFocalLength2ExpectError0FocalLength" Id="{7f705421-cabe-4fb4-ae0b-bb5dd7e6e701}">
      <Declaration><![CDATA[
METHOD TestInvalidFocalLength2ExpectError0FocalLength
VAR
    fbFallibleLREALFocalLength1Mock : FB_FallibleLREALMock;
    fbFallibleLREALFocalLength2Mock : FB_FallibleLREALMock;
    fbFallibleINTMultiplier1Mock : FB_FallibleINTMock;
    fbFallibleINTMultiplier2Mock : FB_FallibleINTMock;
    // Subject under test
    fbCompoundLenses : FB_CompoundLenses(iFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         iFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         iMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         iMultiplier2 := fbFallibleINTMultiplier2Mock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestInvalidFocalLength2ExpectError0FocalLength');

// Test fixture
SetInitialFocalLengthAndMultiplierValues(fbFallibleLREALFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         fbFallibleLREALFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         fbFallibleINTMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         fbFallibleINTMultiplier2 := fbFallibleINTMultiplier2Mock);
fbFallibleLREALFocalLength2Mock.SetError(sMsg := 'Error');

// Here the test starts
fbCompoundLenses();

AssertTrue(
    Condition := fbCompoundLenses.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCompoundLenses.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCompoundLenses.Val,
    Delta := 0,
    Message := 'Calculated focal length compounded should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestInvalidMultiplier1ExpectError0FocalLength" Id="{1389841d-9da1-4b31-b101-e7aade8b5a0a}">
      <Declaration><![CDATA[
METHOD TestInvalidMultiplier1ExpectError0FocalLength
VAR
    fbFallibleLREALFocalLength1Mock : FB_FallibleLREALMock;
    fbFallibleLREALFocalLength2Mock : FB_FallibleLREALMock;
    fbFallibleINTMultiplier1Mock : FB_FallibleINTMock;
    fbFallibleINTMultiplier2Mock : FB_FallibleINTMock;
    // Subject under test
    fbCompoundLenses : FB_CompoundLenses(iFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         iFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         iMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         iMultiplier2 := fbFallibleINTMultiplier2Mock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestInvalidMultiplier1ExpectError0FocalLength');

// Test fixture
SetInitialFocalLengthAndMultiplierValues(fbFallibleLREALFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         fbFallibleLREALFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         fbFallibleINTMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         fbFallibleINTMultiplier2 := fbFallibleINTMultiplier2Mock);
fbFallibleINTMultiplier1Mock.SetError('Error');

// Here the test starts
fbCompoundLenses();

AssertTrue(
    Condition := fbCompoundLenses.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCompoundLenses.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCompoundLenses.Val,
    Delta := 0,
    Message := 'Calculated focal length compounded should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestInvalidMultiplier2ExpectError0FocalLength" Id="{ac457480-5434-4351-95ea-4a0b107e679c}">
      <Declaration><![CDATA[
METHOD TestInvalidMultiplier2ExpectError0FocalLength
VAR
    fbFallibleLREALFocalLength1Mock : FB_FallibleLREALMock;
    fbFallibleLREALFocalLength2Mock : FB_FallibleLREALMock;
    fbFallibleINTMultiplier1Mock : FB_FallibleINTMock;
    fbFallibleINTMultiplier2Mock : FB_FallibleINTMock;
    // Subject under test
    fbCompoundLenses : FB_CompoundLenses(iFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         iFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         iMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         iMultiplier2 := fbFallibleINTMultiplier2Mock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestInvalidMultiplier2ExpectError0FocalLength');

// Test fixture
SetInitialFocalLengthAndMultiplierValues(fbFallibleLREALFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         fbFallibleLREALFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         fbFallibleINTMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         fbFallibleINTMultiplier2 := fbFallibleINTMultiplier2Mock);
fbFallibleINTMultiplier2Mock.SetError('Error');

// Here the test starts
fbCompoundLenses();

AssertTrue(
    Condition := fbCompoundLenses.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCompoundLenses.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCompoundLenses.Val,
    Delta := 0,
    Message := 'Calculated focal length compounded should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestNegMultiplier1ExpectError0FocalLength" Id="{0a50e7fc-0cd1-4e4a-bc10-32e5185f3a93}">
      <Declaration><![CDATA[
METHOD TestNegMultiplier1ExpectError0FocalLength
VAR
    fbFallibleLREALFocalLength1Mock : FB_FallibleLREALMock;
    fbFallibleLREALFocalLength2Mock : FB_FallibleLREALMock;
    fbFallibleINTMultiplier1Mock : FB_FallibleINTMock;
    fbFallibleINTMultiplier2Mock : FB_FallibleINTMock;
    // Subject under test
    fbCompoundLenses : FB_CompoundLenses(iFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         iFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         iMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         iMultiplier2 := fbFallibleINTMultiplier2Mock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestNegMultiplier1ExpectError0FocalLength');

// Test fixture
SetInitialFocalLengthAndMultiplierValues(fbFallibleLREALFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         fbFallibleLREALFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         fbFallibleINTMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         fbFallibleINTMultiplier2 := fbFallibleINTMultiplier2Mock);
fbFallibleINTMultiplier1Mock.Val := -1;

// Here the test starts
fbCompoundLenses();

AssertTrue(
    Condition := fbCompoundLenses.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCompoundLenses.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCompoundLenses.Val,
    Delta := 0,
    Message := 'Calculated focal length compounded should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestNegMultiplier2ExpectError0FocalLength" Id="{88d5c59b-0a71-43fe-8506-7636b56cb461}">
      <Declaration><![CDATA[
METHOD TestNegMultiplier2ExpectError0FocalLength
VAR
    fbFallibleLREALFocalLength1Mock : FB_FallibleLREALMock;
    fbFallibleLREALFocalLength2Mock : FB_FallibleLREALMock;
    fbFallibleINTMultiplier1Mock : FB_FallibleINTMock;
    fbFallibleINTMultiplier2Mock : FB_FallibleINTMock;
    // Subject under test
    fbCompoundLenses : FB_CompoundLenses(iFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         iFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         iMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         iMultiplier2 := fbFallibleINTMultiplier2Mock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestNegMultiplier2ExpectError0FocalLength');

// Test fixture
SetInitialFocalLengthAndMultiplierValues(fbFallibleLREALFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         fbFallibleLREALFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         fbFallibleINTMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         fbFallibleINTMultiplier2 := fbFallibleINTMultiplier2Mock);
fbFallibleINTMultiplier2Mock.Val := -1;

// Here the test starts
fbCompoundLenses();

AssertTrue(
    Condition := fbCompoundLenses.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCompoundLenses.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCompoundLenses.Val,
    Delta := 0,
    Message := 'Calculated focal length compounded should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValidInputsExpectNoErrorAccurateFocalLength" Id="{ebe91652-846f-46fc-946b-f0c6b61f529d}">
      <Declaration><![CDATA[
METHOD TestValidInputsExpectNoErrorAccurateFocalLength
VAR_INPUT
    fFocalLength1 : LREAL;
    nMultiplier1 : INT;
    fFocalLength2 : LREAL;
    nMultiplier2 : INT;

    fExpected : LREAL;
END_VAR
VAR
    fbFallibleLREALFocalLength1Mock : FB_FallibleLREALMock;
    fbFallibleLREALFocalLength2Mock : FB_FallibleLREALMock;
    fbFallibleINTMultiplier1Mock : FB_FallibleINTMock;
    fbFallibleINTMultiplier2Mock : FB_FallibleINTMock;
    // Subject under test
    fbCompoundLenses : FB_CompoundLenses(iFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         iFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         iMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         iMultiplier2 := fbFallibleINTMultiplier2Mock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(CONCAT(STR1 := 'TestValidInputsExpectNoErrorAccurateFocalLength ID: ',
            STR2 := INT_TO_STRING(nTestID)));

// Test fixture
SetInitialFocalLengthAndMultiplierValues(fbFallibleLREALFocalLength1 := fbFallibleLREALFocalLength1Mock,
                                         fbFallibleLREALFocalLength2 := fbFallibleLREALFocalLength2Mock,
                                         fbFallibleINTMultiplier1 := fbFallibleINTMultiplier1Mock,
                                         fbFallibleINTMultiplier2 := fbFallibleINTMultiplier2Mock);
fbFallibleLREALFocalLength1Mock.Val := fFocalLength1;
fbFallibleLREALFocalLength2Mock.Val := fFocalLength2;
fbFallibleINTMultiplier1Mock.Val := nMultiplier1;
fbFallibleINTMultiplier2Mock.Val := nMultiplier2;

// Here the test starts
fbCompoundLenses();

AssertFalse(
    Condition := fbCompoundLenses.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertFalse(
    Condition := fbCompoundLenses.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertEquals_LREAL(
    Expected := fExpected,
    Actual := fbCompoundLenses.Val,
    Delta := ABS(0.001 * fExpected),
    Message := 'Calculated focal length did not calculate close enough to the expected value.'
);

TEST_FINISHED();

nTestID := nTestID + 1;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>