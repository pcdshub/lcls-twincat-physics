<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_LensSet_Test" Id="{959fcf0e-1b33-40b1-a7be-9a4bd9a118a1}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_LensSet_Test EXTENDS TcUnit.FB_TestSuite
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
TestGetFocalLengthOfExpectNoErrorCorrectValue();

TestIndexIndexInRangeExpectTrue();

TestSetInvalidNumLensesExpectErrorNoChangeToValue();

TestSetMaterialNameOfGetMaterialNameOfExpectNoErrorCorrectValue();

TestSetMultiplierOfGetMultiplierOfExpectNoErrorCorrectValue();

TestSetNumLensesGetNumLensesExpectNoErrorValueSet();

TestSetRadiusOfGetRadiusOfExpectNoErrorCorrectValue();

TestTooHighIndexIndexInRangeExpectFalse();

TestTooLowIndexIndexInRangeExpectFalse();
]]></ST>
    </Implementation>
    <Method Name="TestGetFocalLengthOfExpectNoErrorCorrectValue" Id="{948c4df3-6b74-4e4d-9d26-00e4d7a6426e}">
      <Declaration><![CDATA[
METHOD TestGetFocalLengthOfExpectNoErrorCorrectValue
VAR
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLensMock;
    // Subject under test
    fbLensSet : FB_LensSet(
        iConvertUnits := fbConvertUnitsLREALMock,
        iCalcFocalLengthSingleLens := fbCalcFocalLengthSingleLens
    );
    fExpected : LREAL;
    fResult : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestGetFocalLengthOfExpectNoErrorCorrectValue');

// Test Fixture
fExpected := 12.0;

fbLensSet.NumLenses:= 5;
fbCalcFocalLengthSingleLens.SetResult(fExpected);

// Here the test starts
fResult := fbLensSet.GetFocalLengthOf(nLensNum := 1);

AssertFalse(
    Condition := fbLensSet.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertTrue(
    Condition := fbLensSet.GetErrorMsg() = '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertEquals_LREAL(
    Expected := fExpected,
    Actual := fResult,
    Delta := 0.0,
    Message := 'Focallength did not have the correct value.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIndexIndexInRangeExpectTrue" Id="{1564fb33-badf-45fa-8b05-f60c5ace519e}">
      <Declaration><![CDATA[
METHOD TestIndexIndexInRangeExpectTrue
VAR
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLensMock;
    // Subject under test
    fbLensSet : FB_LensSet(
        iConvertUnits := fbConvertUnitsLREALMock,
        iCalcFocalLengthSingleLens := fbCalcFocalLengthSingleLens
    );
    bResult : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestIndexIndexInRangeExpectTrue');

// Test Fixture
fbLensSet.NumLenses:= 9;

// Here the test starts
bResult := fbLensSet.IndexInRange(nIndex := 9);

AssertFalse(
    Condition := fbLensSet.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertTrue(
    Condition := fbLensSet.GetErrorMsg() = '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertTrue(
    Condition := bResult,
    Message := 'Index should have registered as in range.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSetInvalidNumLensesExpectErrorNoChangeToValue" Id="{6e1a08f1-05bf-4a64-a3f2-0ce2e1fad65f}">
      <Declaration><![CDATA[
METHOD TestSetInvalidNumLensesExpectErrorNoChangeToValue
VAR
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLensMock;
    // Subject under test
    fbLensSet : FB_LensSet(
        iConvertUnits := fbConvertUnitsLREALMock,
        iCalcFocalLengthSingleLens := fbCalcFocalLengthSingleLens
    );
    nNumLenses : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestSetInvalidNumLensesExpectErrorNoChangeToValue');

// Test Fixture
nNumLenses := 5;
fbLensSet.NumLenses:= nNumLenses;

// Here the test starts
fbLensSet.NumLenses := 0;

AssertTrue(
    Condition := fbLensSet.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertFalse(
    Condition := fbLensSet.GetErrorMsg() = '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_INT(
    Expected := nNumLenses,
    Actual := fbLensSet.NumLenses,
    Message := 'NumLenses should not have changed.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSetMaterialNameOfGetMaterialNameOfExpectNoErrorCorrectValue" Id="{06da589f-bfc8-49ef-b9bc-1f973a59e2e8}">
      <Declaration><![CDATA[
METHOD TestSetMaterialNameOfGetMaterialNameOfExpectNoErrorCorrectValue
VAR
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLensMock;
    // Subject under test
    fbLensSet : FB_LensSet(
        iConvertUnits := fbConvertUnitsLREALMock,
        iCalcFocalLengthSingleLens := fbCalcFocalLengthSingleLens
    );
    sExpected : T_MaxString;
    sResult : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestSetMaterialNameOfGetMaterialNameOfExpectNoErrorCorrectValue');

// Test Fixture
sExpected := 'Material1';

fbLensSet.NumLenses:= 5;

// Here the test starts
fbLensSet.SetMaterialNameOf(nLensNum := 1, sMaterialName := sExpected);
sResult := fbLensSet.GetMaterialNameOf(nLensNum := 1);

AssertFalse(
    Condition := fbLensSet.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertTrue(
    Condition := fbLensSet.GetErrorMsg() = '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertEquals_STRING(
    Expected := sExpected,
    Actual := sResult,
    Message := 'String did not have the correct value.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSetMultiplierOfGetMultiplierOfExpectNoErrorCorrectValue" Id="{f512f237-d31e-4a91-b6ef-e14738bdb174}">
      <Declaration><![CDATA[
METHOD TestSetMultiplierOfGetMultiplierOfExpectNoErrorCorrectValue
VAR
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLensMock;
    // Subject under test
    fbLensSet : FB_LensSet(
        iConvertUnits := fbConvertUnitsLREALMock,
        iCalcFocalLengthSingleLens := fbCalcFocalLengthSingleLens
    );
    nExpected : INT;
    nResult : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestSetMultiplierOfGetMultiplierOfExpectNoErrorCorrectValue');

// Test Fixture
nExpected := 15;

fbLensSet.NumLenses:= 5;

// Here the test starts
fbLensSet.SetMultiplierOf(nLensNum := 1, nMultiplier := nExpected);
nResult := fbLensSet.GetMultiplierOf(nLensNum := 1);

AssertFalse(
    Condition := fbLensSet.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertTrue(
    Condition := fbLensSet.GetErrorMsg() = '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertEquals_INT(
    Expected := nExpected,
    Actual := nResult,
    Message := 'Mutlplier did not have the correct value.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSetNumLensesGetNumLensesExpectNoErrorValueSet" Id="{bf018f87-a842-4889-8d85-6accaf0c30dd}">
      <Declaration><![CDATA[
METHOD TestSetNumLensesGetNumLensesExpectNoErrorValueSet
VAR
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLensMock;
    // Subject under test
    fbLensSet : FB_LensSet(
        iConvertUnits := fbConvertUnitsLREALMock,
        iCalcFocalLengthSingleLens := fbCalcFocalLengthSingleLens
    );
    nNumLenses : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestSetNumLensesGetNumLensesExpectNoErrorValueSet');

// Test Fixture
nNumLenses := 5;

// Here the test starts
fbLensSet.NumLenses:= nNumLenses;

AssertFalse(
    Condition := fbLensSet.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertTrue(
    Condition := fbLensSet.GetErrorMsg() = '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertEquals_INT(
    Expected := nNumLenses,
    Actual := fbLensSet.NumLenses,
    Message := 'NumLenses did not set properly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSetRadiusOfGetRadiusOfExpectNoErrorCorrectValue" Id="{f1e9f4c9-0c54-48de-97f0-f274b818e695}">
      <Declaration><![CDATA[
METHOD TestSetRadiusOfGetRadiusOfExpectNoErrorCorrectValue
VAR
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLensMock;
    // Subject under test
    fbLensSet : FB_LensSet(
        iConvertUnits := fbConvertUnitsLREALMock,
        iCalcFocalLengthSingleLens := fbCalcFocalLengthSingleLens
    );
    fbExpected : FB_QuantityLREALPublicMock;
    fbResult : FB_QuantityLREALPublic(Units := '1');
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestSetRadiusOfGetRadiusOfExpectNoErrorCorrectValue');

// Test Fixture
fbExpected.Val := 76.32;
fbExpected.Units := 'm';

fbLensSet.NumLenses := 5;

// Here the test starts
fbLensSet.SetRadiusOf(LensNum := 1, Radius := fbExpected);
fbResult := fbLensSet.GetRadiusOf(LensNum := 1);

AssertFalse(
    Condition := fbLensSet.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertTrue(
    Condition := fbLensSet.GetErrorMsg() = '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertEquals_LREAL(
    Expected := fbExpected.Val,
    Actual := fbResult.Val,
    Delta := 0.0,
    Message := 'Radius did not have the correct value.'
);

AssertEquals_STRING(
    Expected := fbExpected.Units,
    Actual := fbResult.Units,
    Message := 'Radius did not have the correct units.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTooHighIndexIndexInRangeExpectFalse" Id="{af6a7413-9b4b-4008-b3a7-e0c356c39a51}">
      <Declaration><![CDATA[
METHOD TestTooHighIndexIndexInRangeExpectFalse
VAR
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLensMock;
    // Subject under test
    fbLensSet : FB_LensSet(
        iConvertUnits := fbConvertUnitsLREALMock,
        iCalcFocalLengthSingleLens := fbCalcFocalLengthSingleLens
    );
    bResult : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestTooHighIndexIndexInRangeExpectFalse');

// Test Fixture
fbLensSet.NumLenses:= 9;

// Here the test starts
bResult := fbLensSet.IndexInRange(nIndex := fbLensSet.NumLenses + 1);

AssertFalse(
    Condition := fbLensSet.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertTrue(
    Condition := fbLensSet.GetErrorMsg() = '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertFalse(
    Condition := bResult,
    Message := 'Index should have registered as out of range.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTooLowIndexIndexInRangeExpectFalse" Id="{0acb188b-4d74-41f8-aaf5-43b264bf17d3}">
      <Declaration><![CDATA[
METHOD TestTooLowIndexIndexInRangeExpectFalse
VAR
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLensMock;
    // Subject under test
    fbLensSet : FB_LensSet(
        iConvertUnits := fbConvertUnitsLREALMock,
        iCalcFocalLengthSingleLens := fbCalcFocalLengthSingleLens
    );
    bResult : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestTooLowIndexIndexInRangeExpectFalse');

// Test Fixture
fbLensSet.NumLenses:= 9;

// Here the test starts
bResult := fbLensSet.IndexInRange(nIndex := 0);

AssertFalse(
    Condition := fbLensSet.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertTrue(
    Condition := fbLensSet.GetErrorMsg() = '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertFalse(
    Condition := bResult,
    Message := 'Index should have registered as out of range.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>