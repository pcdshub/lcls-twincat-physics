<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_LensSetCompounder_Test" Id="{5993f0f3-1baa-4de2-b246-1c47c7a4f45d}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_LensSetCompounder_Test EXTENDS TcUnit.FB_TestSuite
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
Test0FocalLengthExpectError0FocalLength();

Test0SourceDistanceExpectError0FocalLength();

TestActualImageDistanceExpectNoErrorAccurateFocalLength();

TestInvalidImageDistanceExpectError0FocalLength();

TestMockedImageDistanceExpectNoErrorAccurateFocalLength();

TestResetExpectNoErrorAccurateFocalLength();

TestResetExpectNoErrorAccurateFocalLength_1();

]]></ST>
    </Implementation>
    <Method Name="Test0FocalLengthExpectError0FocalLength" Id="{4e09a27c-194e-43ea-ae5a-bafa98ac407f}">
      <Declaration><![CDATA[
METHOD Test0FocalLengthExpectError0FocalLength
VAR
    fbCalcImageDistanceMock : FB_CalcImageDistanceMock;
    // Subject under test
    fbLensSetCompounder : FB_LensSetCompounder(iCalcImageDistance := fbCalcImageDistanceMock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('Test0FocalLengthExpectError0FocalLength');

// Test fixture
fbLensSetCompounder.Reset();

// Here the test starts
fbLensSetCompounder.Compound(
    FocalLength := 0.0,
    SourceDistance := 1.0
);

AssertTrue(
    Condition := fbLensSetCompounder.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbLensSetCompounder.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbLensSetCompounder.FocalLengthCompounded,
    Delta := 0,
    Message := 'Calculated focal length compounded should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test0SourceDistanceExpectError0FocalLength" Id="{531f2114-ea90-42eb-b369-ba8078180eb6}">
      <Declaration><![CDATA[
METHOD Test0SourceDistanceExpectError0FocalLength
VAR
    fbCalcImageDistanceMock : FB_CalcImageDistanceMock;
    // Subject under test
    fbLensSetCompounder : FB_LensSetCompounder(iCalcImageDistance := fbCalcImageDistanceMock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('Test0SourceDistanceExpectError0FocalLength');

// Test fixture
fbLensSetCompounder.Reset();

// Here the test starts
fbLensSetCompounder.Compound(
    FocalLength := 1.0,
    SourceDistance := 0.0
);

AssertTrue(
    Condition := fbLensSetCompounder.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbLensSetCompounder.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbLensSetCompounder.FocalLengthCompounded,
    Delta := 0,
    Message := 'Calculated focal length compounded should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestActualImageDistanceExpectNoErrorAccurateFocalLength" Id="{fabfe1ef-8f25-4c28-be2e-09d8e40cbc5a}">
      <Declaration><![CDATA[
METHOD TestActualImageDistanceExpectNoErrorAccurateFocalLength
VAR
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    fbCalcImageDistance : FB_CalcImageDistance(iConvertUnits := fbConvertUnitsLREALMock);
    // Subject under test
    fbLensSetCompounder : FB_LensSetCompounder(iCalcImageDistance := fbCalcImageDistance);
    d12 : LREAL;
    d23 : LREAL;
    f1 : LREAL;
    f2 : LREAL;
    f3 : LREAL;
    o1 : LREAL;
    o2 : LREAL;
    o3 : LREAL;
    i1 : LREAL;
    i2 : LREAL;
    i3 : LREAL;
    fExpected : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestActualImageDistanceExpectNoErrorAccurateFocalLength');

// Test fixture
d12 := 8.0;
d23 := 2.0;
f1 := 3.0;
f2 := 4.0;
f3 := 5.0;
o1 := 10.0;

i1 := 1.0 / ((1.0)/(f1) - (1.0)/(o1));
o2 := d12 - i1;
i2 := 1.0 / ((1.0)/(f2) - (1.0)/(o2));
o3 := d23 - i2;
i3 := 1.0 / ((1.0)/(f3) - (1.0)/(o3));

fExpected := i3;

fbLensSetCompounder.Reset();

// Here the test starts
fbLensSetCompounder.Compound(
    FocalLength := f1,
    SourceDistance := o1
);

fbLensSetCompounder.Compound(
    FocalLength := f2,
    SourceDistance := o1 + d12
);

fbLensSetCompounder.Compound(
    FocalLength := f3,
    SourceDistance := o1 + d12 + d23
);

AssertFalse(
    Condition := fbLensSetCompounder.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertFalse(
    Condition := fbLensSetCompounder.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertEquals_LREAL(
    Expected := fExpected,
    Actual := fbLensSetCompounder.FocalLengthCompounded,
    Delta := ABS(0.001 * fExpected),
    Message := 'Calculated focal length did not calculate close enough to the expected value.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestInvalidImageDistanceExpectError0FocalLength" Id="{a2f781f2-7cbf-4544-9234-9793a416eb8b}">
      <Declaration><![CDATA[
METHOD TestInvalidImageDistanceExpectError0FocalLength
VAR
    fbCalcImageDistanceMock : FB_CalcImageDistanceMock;
    // Subject under test
    fbLensSetCompounder : FB_LensSetCompounder(iCalcImageDistance := fbCalcImageDistanceMock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestInvalidImageDistanceExpectError0FocalLength');

// Test fixture
fbLensSetCompounder.Reset();

fbCalcImageDistanceMock.SetError(Msg := 'Error');

// Here the test starts
fbLensSetCompounder.Compound(
    FocalLength := 1.0,
    SourceDistance := 1.0
);

AssertTrue(
    Condition := fbLensSetCompounder.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbLensSetCompounder.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbLensSetCompounder.FocalLengthCompounded,
    Delta := 0,
    Message := 'Calculated focal length compounded should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMockedImageDistanceExpectNoErrorAccurateFocalLength" Id="{c49174e3-2525-4e95-9784-be09b6e3c532}">
      <Declaration><![CDATA[
METHOD TestMockedImageDistanceExpectNoErrorAccurateFocalLength
VAR
    fbCalcImageDistanceMock : FB_CalcImageDistanceMock;
    // Subject under test
    fbLensSetCompounder : FB_LensSetCompounder(iCalcImageDistance := fbCalcImageDistanceMock);
    fExpected : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestMockedImageDistanceExpectNoErrorAccurateFocalLength');

// Test fixture
fExpected := 4.0;

fbLensSetCompounder.Reset();

// Here the test starts
fbCalcImageDistanceMock.SetResult(2.0);
fbLensSetCompounder.Compound(
    FocalLength := 1.0,
    SourceDistance := 2.0
);

fbCalcImageDistanceMock.SetResult(3.0);
fbLensSetCompounder.Compound(
    FocalLength := 3.0,
    SourceDistance := 16.0
);

fbCalcImageDistanceMock.SetResult(fExpected);
fbLensSetCompounder.Compound(
    FocalLength := 5.0,
    SourceDistance := 123.0
);

AssertFalse(
    Condition := fbLensSetCompounder.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertFalse(
    Condition := fbLensSetCompounder.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertEquals_LREAL(
    Expected := fExpected,
    Actual := fbLensSetCompounder.FocalLengthCompounded,
    Delta := 0.0,
    Message := 'Calculated focal length did not calculate close enough to the expected value.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestResetExpectNoErrorAccurateFocalLength" Id="{0abee4fc-1017-4ec8-8ac5-472bd8e77ba5}">
      <Declaration><![CDATA[
METHOD TestResetExpectNoErrorAccurateFocalLength
VAR
    fbCalcImageDistanceMock : FB_CalcImageDistanceMock;
    // Subject under test
    fbLensSetCompounder : FB_LensSetCompounder(iCalcImageDistance := fbCalcImageDistanceMock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestResetExpectNoErrorAccurateFocalLength');

// Test fixture
fbLensSetCompounder.Reset();

// Here the test starts
fbCalcImageDistanceMock.SetResult(2.0);
fbLensSetCompounder.Compound(
    FocalLength := 1.0,
    SourceDistance := 1.0
);

fbLensSetCompounder.Reset();

AssertFalse(
    Condition := fbLensSetCompounder.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertFalse(
    Condition := fbLensSetCompounder.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertEquals_LREAL(
    Expected := 0.0,
    Actual := fbLensSetCompounder.FocalLengthCompounded,
    Delta := 0.0,
    Message := 'Calculated focal length did not calculate close enough to the expected value.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestResetExpectNoErrorAccurateFocalLength_1" Id="{a601ea57-8022-49f6-b1b6-b8381c80d811}">
      <Declaration><![CDATA[
METHOD TestResetExpectNoErrorAccurateFocalLength_1
VAR
    fbCalcImageDistanceMock : FB_CalcImageDistanceMock;
    // Subject under test
    fbLensSetCompounder : FB_LensSetCompounder(iCalcImageDistance := fbCalcImageDistanceMock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestResetExpectNoErrorAccurateFocalLength_1');

// Test fixture
fbLensSetCompounder.Reset();

// Here the test starts
fbCalcImageDistanceMock.SetResult(2.0);
fbLensSetCompounder.Compound(
    FocalLength := 1.0,
    SourceDistance := 1.0
);

fbLensSetCompounder.Reset();

fbCalcImageDistanceMock.SetResult(2.0);
fbLensSetCompounder.Compound(
    FocalLength := 1.0,
    SourceDistance := 1.0
);

AssertFalse(
    Condition := fbLensSetCompounder.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertFalse(
    Condition := fbLensSetCompounder.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertEquals_LREAL(
    Expected := 2.0,
    Actual := fbLensSetCompounder.FocalLengthCompounded,
    Delta := 0.0,
    Message := 'Calculated focal length did not calculate close enough to the expected value.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>