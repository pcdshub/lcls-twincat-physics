<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_CalcFocalLengthSingleLens2_Test" Id="{85175de0-d809-48a0-9035-d5cabefef591}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_CalcFocalLengthSingleLens2_Test EXTENDS FB_TestSuite
VAR
    nTestID : INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
TestInvalidDeltaExpectError0FocalLength();

Test0DeltaExpectError0FocalLength();

TestInvalidRadiusExpectError0FocalLength();

Test0RadiusExpectError0FocalLength();

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 1.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 0.005621922785393444,
    fRadius := 0.0001,
    fExpected := 0.008893754309452119
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 2.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 0.005621922785393444,
    fRadius := 0.0051,
    fExpected := 0.45358146978205804
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 3.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 1.7147402940032417e-06,
    fRadius := 0.0001,
    fExpected := 29.15893454819898
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 4.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 1.7147402940032417e-06,
    fRadius := 0.0051,
    fExpected := 1487.105661958148
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 5.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 4.316182378185529e-07,
    fRadius := 0.0001,
    fExpected := 115.84311231310711
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 6.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fDelta := 4.316182378185529e-07,
    fRadius := 0.0051,
    fExpected := 5907.998727968463
);
]]></ST>
    </Implementation>
    <Method Name="SetInitialDeltaAndRadiusValues" Id="{bdf9ec0b-14ec-48c2-a21f-eb2530271dd3}">
      <Declaration><![CDATA[METHOD PRIVATE SetInitialDeltaAndRadiusValues
VAR_IN_OUT
    fbFallibleLREALDelta : FB_FallibleLREALMock;
    fbFallibleLREALRadius : FB_FallibleLREALMock;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
fbFallibleLREALDelta.Val := 1.0;
fbFallibleLREALDelta.ClearError();

fbFallibleLREALRadius.Val := 1.0;
fbFallibleLREALRadius.ClearError();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test0DeltaExpectError0FocalLength" Id="{884decc0-7ccd-43be-b539-b042f489f0ce}">
      <Declaration><![CDATA[
METHOD PRIVATE Test0DeltaExpectError0FocalLength
VAR
    fbFallibleLREALDeltaMock : FB_FallibleLREALMock;
    fbFallibleLREALRadiusMock : FB_FallibleLREALMock;
    // Subject under test
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLens(iDelta := fbFallibleLREALDeltaMock,
                                                               iRadius := fbFallibleLREALRadiusMock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('Test0DeltaExpectError0FocalLength');

// Test Fixture
SetInitialDeltaAndRadiusValues(fbFallibleLREALDelta := fbFallibleLREALDeltaMock,
                               fbFallibleLREALRadius := fbFallibleLREALRadiusMock);
fbFallibleLREALDeltaMock.Val := 0.0;

fbCalcFocalLengthSingleLens();

AssertTrue(
    Condition := fbCalcFocalLengthSingleLens.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCalcFocalLengthSingleLens.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCalcFocalLengthSingleLens.Val,
    Delta := 0,
    Message := 'Calculated focal length should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test0RadiusExpectError0FocalLength" Id="{2678e1cc-84be-4dd6-bdd3-4144cce0f4be}">
      <Declaration><![CDATA[
METHOD PRIVATE Test0RadiusExpectError0FocalLength
VAR
    fbFallibleLREALDeltaMock : FB_FallibleLREALMock;
    fbFallibleLREALRadiusMock : FB_FallibleLREALMock;
    // Subject under test
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLens(iDelta := fbFallibleLREALDeltaMock,
                                                               iRadius := fbFallibleLREALRadiusMock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('Test0RadiusExpectError0FocalLength');

// Test Fixture
SetInitialDeltaAndRadiusValues(fbFallibleLREALDelta := fbFallibleLREALDeltaMock,
                               fbFallibleLREALRadius := fbFallibleLREALRadiusMock);
fbFallibleLREALRadiusMock.Val := 0.0;

fbCalcFocalLengthSingleLens();

AssertTrue(
    Condition := fbCalcFocalLengthSingleLens.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCalcFocalLengthSingleLens.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCalcFocalLengthSingleLens.Val,
    Delta := 0,
    Message := 'Calculated focal length should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestInvalidDeltaExpectError0FocalLength" Id="{8ce1ae93-c963-4cfd-a51e-bb3ddb1a3cf0}">
      <Declaration><![CDATA[
METHOD PRIVATE TestInvalidDeltaExpectError0FocalLength
VAR
    fbFallibleLREALDeltaMock : FB_FallibleLREALMock;
    fbFallibleLREALRadiusMock : FB_FallibleLREALMock;
    // Subject under test
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLens(iDelta := fbFallibleLREALDeltaMock,
                                                               iRadius := fbFallibleLREALRadiusMock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestInvalidDeltaExpectError0FocalLength');

// Test fixture
SetInitialDeltaAndRadiusValues(fbFallibleLREALDelta := fbFallibleLREALDeltaMock,
                               fbFallibleLREALRadius := fbFallibleLREALRadiusMock);
fbFallibleLREALDeltaMock.SetError(sMsg := 'Error');

fbCalcFocalLengthSingleLens();

AssertTrue(
    Condition := fbCalcFocalLengthSingleLens.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCalcFocalLengthSingleLens.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCalcFocalLengthSingleLens.Val,
    Delta := 0,
    Message := 'Calculated focal length should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestInvalidRadiusExpectError0FocalLength" Id="{871eb8b8-3956-4aa8-972b-39c9068ee835}">
      <Declaration><![CDATA[
METHOD PRIVATE TestInvalidRadiusExpectError0FocalLength
VAR
    fbFallibleLREALDeltaMock : FB_FallibleLREALMock;
    fbFallibleLREALRadiusMock : FB_FallibleLREALMock;
    // Subject under test
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLens(iDelta := fbFallibleLREALDeltaMock,
                                                               iRadius := fbFallibleLREALRadiusMock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestInvalidRadiusExpectError0FocalLength');

// Test fixture
SetInitialDeltaAndRadiusValues(fbFallibleLREALDelta := fbFallibleLREALDeltaMock,
                               fbFallibleLREALRadius := fbFallibleLREALRadiusMock);
fbFallibleLREALRadiusMock.SetError(sMsg := 'Error');

fbCalcFocalLengthSingleLens();

AssertTrue(
    Condition := fbCalcFocalLengthSingleLens.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := fbCalcFocalLengthSingleLens.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := 0,
    Actual := fbCalcFocalLengthSingleLens.Val,
    Delta := 0,
    Message := 'Calculated focal length should be 0 when an error is detected.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValidInputsExpectNoErrorAccurateFocalLength" Id="{ecdb3377-455a-469a-8223-4fdf93173dff}">
      <Declaration><![CDATA[
METHOD PRIVATE TestValidInputsExpectNoErrorAccurateFocalLength
VAR_INPUT
    fDelta : LREAL;
    fRadius : LREAL;

    fExpected : LREAL;
END_VAR
VAR
    fbFallibleLREALDeltaMock : FB_FallibleLREALMock;
    fbFallibleLREALRadiusMock : FB_FallibleLREALMock;
    // Subject under test
    fbCalcFocalLengthSingleLens : FB_CalcFocalLengthSingleLens(iDelta := fbFallibleLREALDeltaMock,
                                                               iRadius := fbFallibleLREALRadiusMock);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(CONCAT(STR1 := 'TestValidInputsExpectNoErrorAccurateFocalLength ID: ',
            STR2 := INT_TO_STRING(nTestID))
);

// Test fixture
SetInitialDeltaAndRadiusValues(fbFallibleLREALDelta := fbFallibleLREALDeltaMock,
                               fbFallibleLREALRadius := fbFallibleLREALRadiusMock);
fbFallibleLREALDeltaMock.Val := fDelta;
fbFallibleLREALRadiusMock.Val := fRadius;

// Here the test starts
fbCalcFocalLengthSingleLens();

AssertFalse(
    Condition := fbCalcFocalLengthSingleLens.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertFalse(
    Condition := fbCalcFocalLengthSingleLens.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to be empty.'
);

AssertEquals_LREAL(
    Expected := fExpected,
    Actual := fbCalcFocalLengthSingleLens.Val,
    Delta := ABS(0.001 * fExpected),
    Message := 'Calculated focal length did not calculate close enough to the expected value.'
);

TEST_FINISHED();

nTestID := nTestID + 1;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>