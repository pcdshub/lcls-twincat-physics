<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_LensCompounder_Test" Id="{f7d35265-95ed-426e-abbf-8e10febba493}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_LensCompounder_Test EXTENDS FB_TestSuiteExtended
VAR
    nTestID : INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
nTestID := 0;

Test0FocalLengthExpectErrorUnchanged();

Test0MultiplierExpectError0FocalLength();

TestNegMultiplierExpectError0FocalLength();

TestResetExpectNoErrorAccurateFocalLength();

TestResetExpectNoErrorAccurateFocalLength_1();

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 1.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 1,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 1,
    fExpected := 0.004446877154726059
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 2.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 1,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 2,
    fExpected := 0.002964584769817373
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 3.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 2,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 1,
    fExpected := 0.002964584769817373
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 4.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 2,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 2,
    fExpected := 0.0022234385773630297
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 5.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 1,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 1,
    fExpected := 0.008722720572731886
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 6.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 1,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 2,
    fExpected := 0.008558140939284115
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 7.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 2,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 1,
    fExpected := 0.004403703590117068
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 8.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.008893754309452119,
    nMultiplier1 := 2,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 2,
    fExpected := 0.004361360286365943
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 9.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 1,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 1,
    fExpected := 0.008722720572731886
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 10.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 1,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 2,
    fExpected := 0.004403703590117068
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 11.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 2,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 1,
    fExpected := 0.008558140939284115
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 12.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 2,
    fFocalLength2 := 0.008893754309452119,
    nMultiplier2 := 2,
    fExpected := 0.004361360286365943
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 13.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 1,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 1,
    fExpected := 0.22679073489102902
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 14.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 1,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 2,
    fExpected := 0.15119382326068603
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 15.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 2,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 1,
    fExpected := 0.15119382326068603
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 16.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 0.45358146978205804,
    nMultiplier1 := 2,
    fFocalLength2 := 0.45358146978205804,
    nMultiplier2 := 2,
    fExpected := 0.11339536744551451
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 17.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 1,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 1,
    fExpected := 16.721597402305513
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 18.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 1,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 2,
    fExpected := 11.147731601537009
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 19.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 2,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 1,
    fExpected := 11.147731601537009
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 20.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 2,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 2,
    fExpected := 8.360798701152756
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 21.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 1,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 1,
    fExpected := 32.80005644298389
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 22.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 1,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 2,
    fExpected := 32.18118745349363
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 23.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 2,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 1,
    fExpected := 16.559251796457886
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 24.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 33.443194804611025,
    nMultiplier1 := 2,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 2,
    fExpected := 16.400028221491944
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 25.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 1,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 1,
    fExpected := 32.80005644298389
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 26.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 1,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 2,
    fExpected := 16.559251796457886
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 27.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 2,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 1,
    fExpected := 32.18118745349363
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 28.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 2,
    fFocalLength2 := 33.443194804611025,
    nMultiplier2 := 2,
    fExpected := 16.400028221491944
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 29.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 1,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 1,
    fExpected := 852.8014675175812
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 30.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 1,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 2,
    fExpected := 568.5343116783874
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 31.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 2,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 1,
    fExpected := 568.5343116783874
);

// Expected results taken from pcdscalc/be_lens_calcs.py.
// Element = Be. Test Count = 32.
TestValidInputsExpectNoErrorAccurateFocalLength(
    fFocalLength1 := 1705.6029350351625,
    nMultiplier1 := 2,
    fFocalLength2 := 1705.6029350351625,
    nMultiplier2 := 2,
    fExpected := 426.4007337587906
);
]]></ST>
    </Implementation>
    <Method Name="Test0FocalLengthExpectErrorUnchanged" Id="{b281f112-8ce2-43a7-9e96-9df05b42c757}">
      <Declaration><![CDATA[
METHOD Test0FocalLengthExpectErrorUnchanged
VAR
    fbFocalLengthMock : FB_QuantityLREALPublicMock;
    fbExpected : FB_QuantityLREALPublicMock;
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    nMultiplier : INT;

    // Subject under test
    fbLensCompounder : FB_LensCompounder(ConvertUnits := fbConvertUnitsLREALMock);
    fbFocalLengthCompounded : FB_QuantityLREALPublic(Units := 'm');
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('Test0FocalLengthExpectErrorUnchanged');

// Test fixture
fbLensCompounder.Reset();

fbFocalLengthMock.Val := 0.0;
fbFocalLengthMock.Units := 'm';

nMultiplier := 1;

fbExpected.Val := fbFocalLengthCompounded.Val;
fbExpected.Units := fbFocalLengthCompounded.Units;

// Here the test starts
fbLensCompounder.Compound(
    FocalLength := fbFocalLengthMock,
    Multiplier := nMultiplier,
    FocalLengthCompounded := fbFocalLengthCompounded
);

AssertError(Fallible := fbLensCompounder);

AssertErrorExactExpectedQuantityLREAL(
    Expected := fbExpected,
    Actual := fbFocalLengthCompounded
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test0MultiplierExpectError0FocalLength" Id="{07524415-12aa-410c-946c-4f8ae36284dd}">
      <Declaration><![CDATA[
METHOD Test0MultiplierExpectError0FocalLength
VAR
    fbFocalLengthMock : FB_QuantityLREALPublicMock;
    fbExpected : FB_QuantityLREALPublicMock;
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    nMultiplier : INT;

    // Subject under test
    fbLensCompounder : FB_LensCompounder(ConvertUnits := fbConvertUnitsLREALMock);
    fbFocalLengthCompounded : FB_QuantityLREALPublic(Units := 'm');
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('Test0MultiplierExpectError0FocalLength');

// Test fixture
fbLensCompounder.Reset();

fbFocalLengthMock.Val := 1.0;
fbFocalLengthMock.Units := 'm';

nMultiplier := 0;

fbExpected.Val := fbFocalLengthCompounded.Val;
fbExpected.Units := fbFocalLengthCompounded.Units;

// Here the test starts
fbLensCompounder.Compound(
    FocalLength := fbFocalLengthMock,
    Multiplier := nMultiplier,
    FocalLengthCompounded := fbFocalLengthCompounded
);

AssertError(Fallible := fbLensCompounder);

AssertErrorExactExpectedQuantityLREAL(
    Expected := fbExpected,
    Actual := fbFocalLengthCompounded
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestNegMultiplierExpectError0FocalLength" Id="{0a50e7fc-0cd1-4e4a-bc10-32e5185f3a93}">
      <Declaration><![CDATA[
METHOD TestNegMultiplierExpectError0FocalLength
VAR
    fbFocalLengthMock : FB_QuantityLREALPublicMock;
    fbExpected : FB_QuantityLREALPublicMock;
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    nMultiplier : INT;

    // Subject under test
    fbLensCompounder : FB_LensCompounder(ConvertUnits := fbConvertUnitsLREALMock);
    fbFocalLengthCompounded : FB_QuantityLREALPublic(Units := 'm');
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestNegMultiplierExpectError0FocalLength');

// Test fixture
fbLensCompounder.Reset();

fbFocalLengthMock.Val := 1.0;
fbFocalLengthMock.Units := 'm';

nMultiplier := -1;

fbExpected.Val := fbFocalLengthCompounded.Val;
fbExpected.Units := fbFocalLengthCompounded.Units;

// Here the test starts
fbLensCompounder.Compound(
    FocalLength := fbFocalLengthMock,
    Multiplier := nMultiplier,
    FocalLengthCompounded := fbFocalLengthCompounded
);

AssertError(Fallible := fbLensCompounder);

AssertErrorExactExpectedQuantityLREAL(
    Expected := fbExpected,
    Actual := fbFocalLengthCompounded
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestResetExpectNoErrorAccurateFocalLength" Id="{076846fa-8184-45ab-be3a-11c83773551f}">
      <Declaration><![CDATA[
METHOD TestResetExpectNoErrorAccurateFocalLength
VAR
    fbFocalLengthMock : FB_QuantityLREALPublicMock;
    fbExpected : FB_QuantityLREALPublicMock;
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    nMultiplier : INT;

    // Subject under test
    fbLensCompounder : FB_LensCompounder(ConvertUnits := fbConvertUnitsLREALMock);
    fbFocalLengthCompounded : FB_QuantityLREALPublic(Units := 'm');
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestResetExpectNoErrorAccurateFocalLength');

// Test fixture
fbLensCompounder.Reset();

fbFocalLengthMock.Val := 1.0;
fbFocalLengthMock.Units := 'm';

nMultiplier := 1;

fbExpected.Val := 0.0;
fbExpected.Units := fbFocalLengthCompounded.Units;

// Here the test starts
fbLensCompounder.Compound(
    FocalLength := fbFocalLengthMock,
    Multiplier := nMultiplier,
    FocalLengthCompounded := fbFocalLengthCompounded
);

fbLensCompounder.Reset();

fbLensCompounder.GetCurrentResult(FocalLengthCompounded := fbFocalLengthCompounded);

AssertNoError(Fallible := fbLensCompounder);

AssertNoErrorExactExpectedQuantityLREAL(
    Expected := fbExpected,
    Actual := fbFocalLengthCompounded
);

TEST_FINISHED();

nTestID := nTestID + 1;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestResetExpectNoErrorAccurateFocalLength_1" Id="{d8699e2c-b50f-4b10-b5ff-eadd751cdc81}">
      <Declaration><![CDATA[
METHOD TestResetExpectNoErrorAccurateFocalLength_1
VAR
    fbFocalLengthMock : FB_QuantityLREALPublicMock;
    fbExpected : FB_QuantityLREALPublicMock;
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    nMultiplier : INT;

    // Subject under test
    fbLensCompounder : FB_LensCompounder(ConvertUnits := fbConvertUnitsLREALMock);
    fbFocalLengthCompounded : FB_QuantityLREALPublic(Units := 'm');
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestResetExpectNoErrorAccurateFocalLength_1');

// Test fixture
fbLensCompounder.Reset();

fbFocalLengthMock.Val := 1.0;
fbFocalLengthMock.Units := 'm';

nMultiplier := 1;

fbExpected.Val := 1.0;
fbExpected.Units := fbFocalLengthCompounded.Units;

// Here the test starts
fbLensCompounder.Compound(
    FocalLength := fbFocalLengthMock,
    Multiplier := nMultiplier,
    FocalLengthCompounded := fbFocalLengthCompounded
);

fbLensCompounder.Reset();

fbLensCompounder.Compound(
    FocalLength := fbFocalLengthMock,
    Multiplier := nMultiplier,
    FocalLengthCompounded := fbFocalLengthCompounded
);

AssertNoError(Fallible := fbLensCompounder);

AssertNoErrorExactExpectedQuantityLREAL(
    Expected := fbExpected,
    Actual := fbFocalLengthCompounded
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValidInputsExpectNoErrorAccurateFocalLength" Id="{ebe91652-846f-46fc-946b-f0c6b61f529d}">
      <Declaration><![CDATA[
METHOD TestValidInputsExpectNoErrorAccurateFocalLength
VAR_INPUT
    fFocalLength1 : LREAL;
    nMultiplier1 : INT;
    fFocalLength2 : LREAL;
    nMultiplier2 : INT;

    fExpected : LREAL;
END_VAR
VAR
    fbFocalLengthMock : FB_QuantityLREALPublicMock;
    fbExpected : FB_QuantityLREALPublicMock;
    fbConvertUnitsLREALMock : FB_ConvertUnitsLREALMock;
    nMultiplier : INT;

    // Subject under test
    fbLensCompounder : FB_LensCompounder(ConvertUnits := fbConvertUnitsLREALMock);
    fbFocalLengthCompounded : FB_QuantityLREALPublic(Units := 'm');
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST(CONCAT(STR1 := 'TestValidInputsExpectNoErrorAccurateFocalLength ID: ',
            STR2 := INT_TO_STRING(nTestID)));

// Test fixture
fbLensCompounder.Reset();

fbFocalLengthMock.Val := fFocalLength1;
fbFocalLengthMock.Units := 'm';

nMultiplier := nMultiplier1;

fbExpected.Val := fExpected;
fbExpected.Units := fbFocalLengthCompounded.Units;

// Here the test starts
fbLensCompounder.Compound(
    FocalLength := fbFocalLengthMock,
    Multiplier := nMultiplier,
    FocalLengthCompounded := fbFocalLengthCompounded
);

fbFocalLengthMock.Val := fFocalLength2;
nMultiplier := nMultiplier2;

fbLensCompounder.Compound(
    FocalLength := fbFocalLengthMock,
    Multiplier := nMultiplier,
    FocalLengthCompounded := fbFocalLengthCompounded
);

AssertNoError(Fallible := fbLensCompounder);

AssertNoErrorExpectedQuantityLREAL(
    Expected := fbExpected,
    Actual := fbFocalLengthCompounded,
    Delta := ABS(0.001 * fbExpected.Val)
);

TEST_FINISHED();

nTestID := nTestID + 1;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>