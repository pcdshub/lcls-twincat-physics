<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ConvertUnits_Test" Id="{f018bc01-d3ce-4e8f-9cb5-36892bbdbe6d}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_ConvertUnits_Test EXTENDS FB_TestSuiteExtended
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
TestInputUnitSameAsDesiredUnitExpectNoErrorCorrectResult();

TestInvalidInputDesiredUnitExpectErrorNoChange();

TestInvalidInputUnitExpectErrorNoChange();

TestValidInputExpectNoErrorCorrectResult_1();
]]></ST>
    </Implementation>
    <Method Name="AssertErrorCorrectResult" Id="{7af576fa-cbeb-4cc0-8c0c-c1a071214a33}">
      <Declaration><![CDATA[
METHOD PRIVATE AssertErrorCorrectResult
VAR_INPUT
    iQuantity : I_QuantityLREAL;
    fExpected : LREAL;
    sExpected : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
AssertTrue(
    Condition := iQuantity.GetError(),
    Message := 'Expected bError bit to be true but it was false.'
);

AssertTrue(
    Condition := iQuantity.GetErrorMsg() <> '',
    Message := 'Expected sErrorMsg to not be empty.'
);

AssertEquals_LREAL(
    Expected := fExpected,
    Actual := iQuantity.Val,
    Delta := ABS(1e-9 * fExpected),
    Message := 'Unit value should be unchanged.'
);

AssertEquals_STRING(
    Expected := sExpected,
    Actual := iQuantity.Units,
    Message := 'Unit text should be unchanged.'
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertNoErrorCorrectResult" Id="{0d328063-0570-4380-a824-b4d1d338b779}">
      <Declaration><![CDATA[
METHOD PRIVATE AssertNoErrorCorrectResult
VAR_INPUT
    iQuantity : I_QuantityLREAL;
    fExpected : LREAL;
    sExpected : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
AssertFalse(
    Condition := iQuantity.GetError(),
    Message := 'Expected bError bit to be false but it was true.'
);

AssertEquals_STRING(
    Expected := '',
    Actual := iQuantity.GetErrorMsg(),
    Message := 'Expected sErrorMsg to be empty.'
);

AssertEquals_LREAL(
    Expected := fExpected,
    Actual := iQuantity.Val,
    Delta := ABS(1e-9 * fExpected),
    Message := 'Unit did not convert properly.'
);

AssertEquals_STRING(
    Expected := sExpected,
    Actual := iQuantity.Units,
    Message := 'Unit did not update properly.'
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestInputUnitSameAsDesiredUnitExpectNoErrorCorrectResult" Id="{26efc5b2-cff8-48cc-afc4-ed66abaf61bc}">
      <Declaration><![CDATA[
METHOD PRIVATE TestInputUnitSameAsDesiredUnitExpectNoErrorCorrectResult
VAR
    fbQuantityMock : FB_QuantityLREALPublicMock;
    fbQuantityOutput : FB_QuantityLREALPublic(Units := '1');
    fbConvertUnits : FB_ConvertUnits;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestInputUnitSameAsDesiredUnitExpectNoErrorCorrectResult');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -7411.376452318382;
fbQuantityMock.Units := 'km/s';

// Convert km/s to km/s
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'km/s',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityMock,
    fExpected := -7411.376452318382,
    sExpected := 'km/s'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestInvalidInputDesiredUnitExpectErrorNoChange" Id="{45b5049b-0abc-49ca-ac33-4ab16fc3a46a}">
      <Declaration><![CDATA[
METHOD PRIVATE TestInvalidInputDesiredUnitExpectErrorNoChange
VAR
    fbQuantityMock : FB_QuantityLREALPublicMock;
    fbQuantityOutput : FB_QuantityLREALPublic(Units := '1');
    fbConvertUnits : FB_ConvertUnits;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestInvalidInputDesiredUnitExpectErrorNoChange');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 223.456;
fbQuantityMock.Units := 'km/s';

fbQuantityOutput.Val := 13;

// Convert km/s to mm/min
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'INVALID',
    ConvertedQuantity := fbQuantityOutput
);

AssertError(Fallible := fbConvertUnits);

AssertErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 13,
    sExpected := '1'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestInvalidInputUnitExpectErrorNoChange" Id="{5c14575d-7b64-4976-9fcb-23a09d4b0b70}">
      <Declaration><![CDATA[
METHOD PRIVATE TestInvalidInputUnitExpectErrorNoChange
VAR
    fbQuantityMock : FB_QuantityLREALPublicMock;
    fbQuantityOutput : FB_QuantityLREALPublic(Units := '1');
    fbConvertUnits : FB_ConvertUnits;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestInvalidInputUnitExpectErrorNoChange');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 123.456;
fbQuantityMock.Units := 'INVALID';

fbQuantityOutput.Val := 13;

// Convert km/s to mm/min
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'mm/min',
    ConvertedQuantity := fbQuantityOutput
);

AssertError(Fallible := fbConvertUnits);

AssertErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 13,
    sExpected := '1'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValidInputExpectNoErrorCorrectResult_1" Id="{a3b7fcd8-3d69-4322-847d-c592e096ac35}">
      <Declaration><![CDATA[
METHOD PRIVATE TestValidInputExpectNoErrorCorrectResult_1
VAR
    fbQuantityMock : FB_QuantityLREALPublicMock;
    fbQuantityOutput : FB_QuantityLREALPublic(Units := '1');
    fbConvertUnits : FB_ConvertUnits;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('TestValidInputExpectNoErrorCorrectResult[µm]TO[mm]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 8930.411656902525;
fbQuantityMock.Units := 'µm';

// Convert µm to mm
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'mm',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 8.930411656902525,
    sExpected := 'mm'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[nm/s]TO[mm/h]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 944.1698736633298;
fbQuantityMock.Units := 'nm/s';

// Convert nm/s to mm/h
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'mm/h',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 3.3990115451879874,
    sExpected := 'mm/h'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[meter/second**2]TO[inch/second**2]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -7196.5501977917465;
fbQuantityMock.Units := 'meter/second**2';

// Convert meter/second**2 to inch/second**2
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'inch/second**2',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -283328.74794455693,
    sExpected := 'inch/second**2'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[centimeter/second**2]TO[µm/s**2]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 6460.639171080817;
fbQuantityMock.Units := 'centimeter/second**2';

// Convert centimeter/second**2 to µm/s**2
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'µm/s**2',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 64606391.710808165,
    sExpected := 'µm/s**2'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[m/min]TO[micrometer/second]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 5813.524444912024;
fbQuantityMock.Units := 'm/min';

// Convert m/min to micrometer/second
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'micrometer/second',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 96892074.08186707,
    sExpected := 'micrometer/second'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[millimeter/minute]TO[cm/h]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -8358.42357283073;
fbQuantityMock.Units := 'millimeter/minute';

// Convert millimeter/minute to cm/h
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'cm/h',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -50150.54143698438,
    sExpected := 'cm/h'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[µm/min]TO[centimeter/hour]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 6650.496448901613;
fbQuantityMock.Units := 'µm/min';

// Convert µm/min to centimeter/hour
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'centimeter/hour',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 39.90297869340968,
    sExpected := 'centimeter/hour'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[picometer/minute]TO[µm/min]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 4030.859795321625;
fbQuantityMock.Units := 'picometer/minute';

// Convert picometer/minute to µm/min
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'µm/min',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 0.004030859795321625,
    sExpected := 'µm/min'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[µm/h]TO[micron/minute]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -7846.981834898048;
fbQuantityMock.Units := 'µm/h';

// Convert µm/h to micron/minute
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'micron/minute',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -130.78303058163414,
    sExpected := 'micron/minute'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[inch/minute]TO[ft/min]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 877.5755746107607;
fbQuantityMock.Units := 'inch/minute';

// Convert inch/minute to ft/min
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'ft/min',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 73.13129788423005,
    sExpected := 'ft/min'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[µ/h]TO[yard/hour]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 8753.702128391764;
fbQuantityMock.Units := 'µ/h';

// Convert µ/h to yard/hour
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'yard/hour',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 0.009573165057296329,
    sExpected := 'yard/hour'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[mg]TO[pg]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -8383.389588024438;
fbQuantityMock.Units := 'mg';

// Convert mg to pg
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'pg',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -8383389588024.438,
    sExpected := 'pg'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[mil/second]TO[mil/minute]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -1237.1775698906222;
fbQuantityMock.Units := 'mil/second';

// Convert mil/second to mil/minute
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'mil/minute',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -74230.65419343734,
    sExpected := 'mil/minute'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[picogram]TO[pg]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -3116.912127853686;
fbQuantityMock.Units := 'picogram';

// Convert picogram to pg
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'pg',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -3116.912127853686,
    sExpected := 'pg'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[a]TO[year]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -242.69670049333945;
fbQuantityMock.Units := 'a';

// Convert a to year
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'year',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -242.69670049333945,
    sExpected := 'year'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[kelvin]TO[kelvin]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 9832.917859291003;
fbQuantityMock.Units := 'kelvin';

// Convert kelvin to kelvin
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'kelvin',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 9832.917859291003,
    sExpected := 'kelvin'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[ft]TO[ft]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 7508.322458867668;
fbQuantityMock.Units := 'ft';

// Convert ft to ft
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'ft',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 7508.322458867668,
    sExpected := 'ft'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[kiloampere]TO[A]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -9050.998469197968;
fbQuantityMock.Units := 'kiloampere';

// Convert kiloampere to A
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'A',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -9050998.469197968,
    sExpected := 'A'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[micropascal]TO[nPa]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 3079.0363484838545;
fbQuantityMock.Units := 'micropascal';

// Convert micropascal to nPa
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'nPa',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 3079036.348483854,
    sExpected := 'nPa'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[microgram]TO[picogram]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 2625.4614859512367;
fbQuantityMock.Units := 'microgram';

// Convert microgram to picogram
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'picogram',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 2625461485.9512367,
    sExpected := 'picogram'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[microtorr]TO[µPa]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -5059.912500429715;
fbQuantityMock.Units := 'microtorr';

// Convert microtorr to µPa
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'µPa',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -674599.5185605801,
    sExpected := 'µPa'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[km]TO[in]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 843.2194421043368;
fbQuantityMock.Units := 'km';

// Convert km to in
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'in',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 33197615.8308794,
    sExpected := 'in'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[foot/minute]TO[mm/h]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -9520.24181406799;
fbQuantityMock.Units := 'foot/minute';

// Convert foot/minute to mm/h
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'mm/h',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -174106182.29567537,
    sExpected := 'mm/h'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[in/s**2]TO[foot/second**2]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -8573.52948710602;
fbQuantityMock.Units := 'in/s**2';

// Convert in/s**2 to foot/second**2
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'foot/second**2',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -714.4607905921682,
    sExpected := 'foot/second**2'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[kilogram]TO[microgram]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 1837.3321141157212;
fbQuantityMock.Units := 'kilogram';

// Convert kilogram to microgram
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'microgram',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 1837332114115.7212,
    sExpected := 'microgram'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[ms]TO[month]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -9246.451410574862;
fbQuantityMock.Units := 'ms';

// Convert ms to month
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'month',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -3.516028371197377e-06,
    sExpected := 'month'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[cm/h]TO[ft/min]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -1581.9738507700204;
fbQuantityMock.Units := 'cm/h';

// Convert cm/h to ft/min
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'ft/min',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -0.8650338204123033,
    sExpected := 'ft/min'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[mil/second**2]TO[mil/s**2]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -1797.9127614233512;
fbQuantityMock.Units := 'mil/second**2';

// Convert mil/second**2 to mil/s**2
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'mil/s**2',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -1797.9127614233512,
    sExpected := 'mil/s**2'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[picoampere]TO[kA]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 4110.987057232502;
fbQuantityMock.Units := 'picoampere';

// Convert picoampere to kA
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'kA',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 4.110987057232502e-12,
    sExpected := 'kA'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[°C]TO[K]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -4487.368702511208;
fbQuantityMock.Units := '°C';

// Convert °C to K
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'K',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -4214.218702511208,
    sExpected := 'K'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[mile/minute]TO[millimeter/hour]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 7794.998799599809;
fbQuantityMock.Units := 'mile/minute';

// Convert mile/minute to millimeter/hour
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'millimeter/hour',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 752690072888.5894,
    sExpected := 'millimeter/hour'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[keV]TO[eV]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -943.048524565238;
fbQuantityMock.Units := 'keV';

// Convert keV to eV
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'eV',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -943048.524565238,
    sExpected := 'eV'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[nanometer]TO[in]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -883.0956858358168;
fbQuantityMock.Units := 'nanometer';

// Convert nanometer to in
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'in',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -3.476754668644948e-05,
    sExpected := 'in'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[µ/s]TO[mi/min]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 2012.8182277501874;
fbQuantityMock.Units := 'µ/s';

// Convert µ/s to mi/min
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'mi/min',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 7.50424357160503e-05,
    sExpected := 'mi/min'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[micron/second**2]TO[micron/second**2]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -3171.6356385593162;
fbQuantityMock.Units := 'micron/second**2';

// Convert micron/second**2 to micron/second**2
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'micron/second**2',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -3171.6356385593162,
    sExpected := 'micron/second**2'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[g]TO[µg]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 5696.73949412332;
fbQuantityMock.Units := 'g';

// Convert g to µg
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'µg',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 5696739494.12332,
    sExpected := 'µg'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[µ/min]TO[mile/minute]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -10.013807996365358;
fbQuantityMock.Units := 'µ/min';

// Convert µ/min to mile/minute
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'mile/minute',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -6.222291813537291e-09,
    sExpected := 'mile/minute'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[mA]TO[A]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 8103.101992435495;
fbQuantityMock.Units := 'mA';

// Convert mA to A
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'A',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 8.103101992435494,
    sExpected := 'A'
);

TEST_FINISHED();



TEST('TestValidInputExpectNoErrorCorrectResult[mi/h]TO[µ/s]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -4209.9789751003655;
fbQuantityMock.Units := 'mi/h';

// Convert mi/h to µ/s
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'µ/s',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -1882029001.0288677,
    sExpected := 'µ/s'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[mil/h]TO[mil/second]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -5845.828251798482;
fbQuantityMock.Units := 'mil/h';

// Convert mil/h to mil/second
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'mil/second',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -1.6238411810551339,
    sExpected := 'mil/second'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[nA]TO[nA]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -1643.180861686471;
fbQuantityMock.Units := 'nA';

// Convert nA to nA
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'nA',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -1643.180861686471,
    sExpected := 'nA'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[kPa]TO[picopascal]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -3090.7451898540894;
fbQuantityMock.Units := 'kPa';

// Convert kPa to picopascal
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'picopascal',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -3.090745189854089e+18,
    sExpected := 'picopascal'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[picopascal]TO[µPa]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 9527.983079329028;
fbQuantityMock.Units := 'picopascal';

// Convert picopascal to µPa
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'µPa',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 0.009527983079329026,
    sExpected := 'µPa'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[hour]TO[a]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 9790.09865377728;
fbQuantityMock.Units := 'hour';

// Convert hour to a
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'a',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 1.1168262210560438,
    sExpected := 'a'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[pm]TO[inch]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -3437.1541551828623;
fbQuantityMock.Units := 'pm';

// Convert pm to inch
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'inch',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -1.3532102973160874e-07,
    sExpected := 'inch'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[µm/s**2]TO[ft/s**2]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -7606.917984531585;
fbQuantityMock.Units := 'µm/s**2';

// Convert µm/s**2 to ft/s**2
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'ft/s**2',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -0.024957080001744045,
    sExpected := 'ft/s**2'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[nm/s**2]TO[inch/second**2]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 6850.817709773597;
fbQuantityMock.Units := 'nm/s**2';

// Convert nm/s**2 to inch/second**2
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'inch/second**2',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 0.0002697172326682519,
    sExpected := 'inch/second**2'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[yard]TO[picometer]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -2057.385322100052;
fbQuantityMock.Units := 'yard';

// Convert yard to picometer
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'picometer',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -1881273138528287.2,
    sExpected := 'picometer'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[d]TO[h]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -2236.2181309698026;
fbQuantityMock.Units := 'd';

// Convert d to h
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'h',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -53669.23514327526,
    sExpected := 'h'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[centigram]TO[pg]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 2860.170187696478;
fbQuantityMock.Units := 'centigram';

// Convert centigram to pg
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'pg',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 28601701876964.78,
    sExpected := 'pg'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[cA]TO[pA]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -9103.97640046244;
fbQuantityMock.Units := 'cA';

// Convert cA to pA
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'pA',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -91039764004624.39,
    sExpected := 'pA'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[megapascal]TO[mPa]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 5142.527950710553;
fbQuantityMock.Units := 'megapascal';

// Convert megapascal to mPa
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'mPa',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 5142527950710.554,
    sExpected := 'mPa'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[cm/s]TO[mile/hour]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -9293.064578931851;
fbQuantityMock.Units := 'cm/s';

// Convert cm/s to mile/hour
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'mile/hour',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -207.87993421017921,
    sExpected := 'mile/hour'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[mi/s**2]TO[foot/second**2]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 1298.2181771045798;
fbQuantityMock.Units := 'mi/s**2';

// Convert mi/s**2 to foot/second**2
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'foot/second**2',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 6854591.975112181,
    sExpected := 'foot/second**2'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[yard/second**2]TO[nm/s**2]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -8263.28754799678;
fbQuantityMock.Units := 'yard/second**2';

// Convert yard/second**2 to nm/s**2
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'nm/s**2',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -7555950133888.255,
    sExpected := 'nm/s**2'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[pound_force_per_square_inch]TO[pound_force_per_square_inch]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 3322.0461047290446;
fbQuantityMock.Units := 'pound_force_per_square_inch';

// Convert pound_force_per_square_inch to pound_force_per_square_inch
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'pound_force_per_square_inch',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 3322.0461047290446,
    sExpected := 'pound_force_per_square_inch'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[m]TO[m]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 9239.649527516322;
fbQuantityMock.Units := 'm';

// Convert m to m
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'm',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 9239.649527516322,
    sExpected := 'm'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[atm]TO[µPa]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 8337.273708595047;
fbQuantityMock.Units := 'atm';

// Convert atm to µPa
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'µPa',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 844774258523393.1,
    sExpected := 'µPa'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[km/min]TO[µ/s]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 770.9873959574525;
fbQuantityMock.Units := 'km/min';

// Convert km/min to µ/s
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'µ/s',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 12849789932.624208,
    sExpected := 'µ/s'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[km/h]TO[mile/minute]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -6278.429483442629;
fbQuantityMock.Units := 'km/h';

// Convert km/h to mile/minute
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'mile/minute',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -65.02058689174625,
    sExpected := 'mile/minute'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[week]TO[year]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -255.208252805578;
fbQuantityMock.Units := 'week';

// Convert week to year
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'year',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -4.89105481078452,
    sExpected := 'year'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[µA]TO[mA]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 1273.2215814087303;
fbQuantityMock.Units := 'µA';

// Convert µA to mA
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'mA',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 1.2732215814087304,
    sExpected := 'mA'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[mm/s]TO[cm/h]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 2098.516278313291;
fbQuantityMock.Units := 'mm/s';

// Convert mm/s to cm/h
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'cm/h',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 755465.8601927848,
    sExpected := 'cm/h'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[yard/minute]TO[yd/min]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -6734.4642530483;
fbQuantityMock.Units := 'yard/minute';

// Convert yard/minute to yd/min
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'yd/min',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -6734.4642530483,
    sExpected := 'yd/min'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[delta_degree_Fahrenheit]TO[°R]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 7438.882173078058;
fbQuantityMock.Units := 'delta_degree_Fahrenheit';

// Convert delta_degree_Fahrenheit to °R
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := '°R',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 7438.882173078058,
    sExpected := '°R'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[mmHg]TO[atm]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 2355.5927306051854;
fbQuantityMock.Units := 'mmHg';

// Convert mmHg to atm
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'atm',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 3.0994645607865996,
    sExpected := 'atm'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[kilometer/second]TO[µ/s]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 4500.500374992675;
fbQuantityMock.Units := 'kilometer/second';

// Convert kilometer/second to µ/s
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'µ/s',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 4500500374992.675,
    sExpected := 'µ/s'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[m/h]TO[mi/h]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -8885.449904946401;
fbQuantityMock.Units := 'm/h';

// Convert m/h to mi/h
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'mi/h',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -5.521162601001651,
    sExpected := 'mi/h'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[micron]TO[ft]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -5544.2877333579845;
fbQuantityMock.Units := 'micron';

// Convert micron to ft
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'ft',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -0.018189920385032757,
    sExpected := 'ft'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[torr]TO[millipascal]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 8860.374537222157;
fbQuantityMock.Units := 'torr';

// Convert torr to millipascal
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'millipascal',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 1181286118.400046,
    sExpected := 'millipascal'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[picometer/second**2]TO[picometer/second**2]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -402.2176758856767;
fbQuantityMock.Units := 'picometer/second**2';

// Convert picometer/second**2 to picometer/second**2
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'picometer/second**2',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -402.2176758856767,
    sExpected := 'picometer/second**2'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[mile]TO[yard]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -9314.291958924088;
fbQuantityMock.Units := 'mile';

// Convert mile to yard
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'yard',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -16393153.847706396,
    sExpected := 'yard'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[cm/min]TO[km/min]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 5877.558364412509;
fbQuantityMock.Units := 'cm/min';

// Convert cm/min to km/min
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'km/min',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 0.05877558364412509,
    sExpected := 'km/min'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[yd/h]TO[km/h]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -7263.563068531797;
fbQuantityMock.Units := 'yd/h';

// Convert yd/h to km/h
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'km/h',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -6.641802069865475,
    sExpected := 'km/h'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[nanogram]TO[cg]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -3291.3294031552323;
fbQuantityMock.Units := 'nanogram';

// Convert nanogram to cg
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'cg',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -0.00032913294031552325,
    sExpected := 'cg'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[µm/s]TO[centimeter/minute]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 8771.853391347831;
fbQuantityMock.Units := 'µm/s';

// Convert µm/s to centimeter/minute
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'centimeter/minute',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 52.63112034808698,
    sExpected := 'centimeter/minute'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[pm/s]TO[foot/minute]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -486.20098629296626;
fbQuantityMock.Units := 'pm/s';

// Convert pm/s to foot/minute
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'foot/minute',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -9.570885556948155e-08,
    sExpected := 'foot/minute'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[nm/min]TO[cm/s]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -3492.6294891565713;
fbQuantityMock.Units := 'nm/min';

// Convert nm/min to cm/s
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'cm/s',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -5.821049148594286e-06,
    sExpected := 'cm/s'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[in/s]TO[km/min]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 8103.600539139905;
fbQuantityMock.Units := 'in/s';

// Convert in/s to km/min
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'km/min',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 12.349887221649215,
    sExpected := 'km/min'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[foot/hour]TO[kilometer/second]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -1032.5705811220414;
fbQuantityMock.Units := 'foot/hour';

// Convert foot/hour to kilometer/second
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'kilometer/second',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -8.742430920166616e-05,
    sExpected := 'kilometer/second'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[s]TO[hour]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 2250.996986450955;
fbQuantityMock.Units := 's';

// Convert s to hour
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'hour',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 0.6252769406808208,
    sExpected := 'hour'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[cm]TO[inch]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 5997.123964141887;
fbQuantityMock.Units := 'cm';

// Convert cm to inch
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'inch',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 2361.072426827515,
    sExpected := 'inch'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[m/s]TO[kilometer/minute]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -7708.70966842842;
fbQuantityMock.Units := 'm/s';

// Convert m/s to kilometer/minute
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'kilometer/minute',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -462.5225801057052,
    sExpected := 'kilometer/minute'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[mm/s**2]TO[pm/s**2]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 3296.754960643275;
fbQuantityMock.Units := 'mm/s**2';

// Convert mm/s**2 to pm/s**2
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'pm/s**2',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 3296754960643.275,
    sExpected := 'pm/s**2'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[nanometer/hour]TO[µ/s]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -7518.46337984039;
fbQuantityMock.Units := 'nanometer/hour';

// Convert nanometer/hour to µ/s
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'µ/s',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -0.0020884620499556643,
    sExpected := 'µ/s'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[ft/s]TO[centimeter/second]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 5515.988407033261;
fbQuantityMock.Units := 'ft/s';

// Convert ft/s to centimeter/second
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'centimeter/second',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 168127.32664637378,
    sExpected := 'centimeter/second'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[degree_Fahrenheit]TO[K]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 4636.545768322407;
fbQuantityMock.Units := 'degree_Fahrenheit';

// Convert degree_Fahrenheit to K
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'K',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 2831.2309824013373,
    sExpected := 'K'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[mtorr]TO[nanopascal]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 6409.083296686898;
fbQuantityMock.Units := 'mtorr';

// Convert mtorr to nanopascal
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'nanopascal',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 854474164522.1051,
    sExpected := 'nanopascal'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[km/s**2]TO[yd/s**2]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -3592.0007598826587;
fbQuantityMock.Units := 'km/s**2';

// Convert km/s**2 to yd/s**2
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'yd/s**2',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -3928259.798646827,
    sExpected := 'yd/s**2'
);

TEST_FINISHED();


TEST('TestValidInputExpectNoErrorCorrectResult[millimeter]TO[millimeter]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -290.97898970632014;
fbQuantityMock.Units := 'millimeter';

// Convert millimeter to millimeter
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'millimeter',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -290.97898970632014,
    sExpected := 'millimeter'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[pm/h]TO[ft/s]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -7562.092971365173;
fbQuantityMock.Units := 'pm/h';

// Convert pm/h to ft/s
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'ft/s',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -6.891671197292555e-12,
    sExpected := 'ft/s'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[mi/s]TO[kilometer/second]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -8498.62383872455;
fbQuantityMock.Units := 'mi/s';

// Convert mi/s to kilometer/second
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'kilometer/second',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -13677.209283108323,
    sExpected := 'kilometer/second'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[yd/s]TO[micrometer/second]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -2492.1362732740863;
fbQuantityMock.Units := 'yd/s';

// Convert yd/s to micrometer/second
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'micrometer/second',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -2278809408.2818246,
    sExpected := 'micrometer/second'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[inch/hour]TO[meter/hour]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 6089.924456731751;
fbQuantityMock.Units := 'inch/hour';

// Convert inch/hour to meter/hour
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'meter/hour',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 154.68408120098647,
    sExpected := 'meter/hour'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[Pa]TO[kPa]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 769.8483617280162;
fbQuantityMock.Units := 'Pa';

// Convert Pa to kPa
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'kPa',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 0.7698483617280163,
    sExpected := 'kPa'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[bar]TO[pPa]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 7838.04135927176;
fbQuantityMock.Units := 'bar';

// Convert bar to pPa
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := 'pPa',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 7.83804135927176e+20,
    sExpected := 'pPa'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[1/cm]TO[1/pm]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -520.7154802751884;
fbQuantityMock.Units := '1/cm';

// Convert 1/cm to 1/pm
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := '1/pm',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -5.207154802751884e-08,
    sExpected := '1/pm'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[1/micrometer]TO[1/kilometer]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 6123.075300586777;
fbQuantityMock.Units := '1/micrometer';

// Convert 1/micrometer to 1/kilometer
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := '1/kilometer',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 6123075300586.777,
    sExpected := '1/kilometer'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[1/inch]TO[1/m]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -4687.946948821551;
fbQuantityMock.Units := '1/inch';

// Convert 1/inch to 1/m
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := '1/m',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -184564.84050478548,
    sExpected := '1/m'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[1/foot]TO[1/nanometer]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -5236.620781043473;
fbQuantityMock.Units := '1/foot';

// Convert 1/foot to 1/nanometer
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := '1/nanometer',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -1.7180514373502208e-05,
    sExpected := '1/nanometer'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[1/yd]TO[1/mm]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 3433.297813684443;
fbQuantityMock.Units := '1/yd';

// Convert 1/yd to 1/mm
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := '1/mm',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 3.754700146199085,
    sExpected := '1/mm'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[1/meter]TO[1/mile]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -9180.58419569764;
fbQuantityMock.Units := '1/meter';

// Convert 1/meter to 1/mile
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := '1/mile',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -14774718.091840824,
    sExpected := '1/mile'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[1/nanometer]TO[1/m]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -4919.135876374241;
fbQuantityMock.Units := '1/nanometer';

// Convert 1/nanometer to 1/m
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := '1/m',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -4919135876374.24,
    sExpected := '1/m'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[1/mile]TO[1/nm]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 5141.367279873293;
fbQuantityMock.Units := '1/mile';

// Convert 1/mile to 1/nm
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := '1/nm',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 3.1946975164248868e-09,
    sExpected := '1/nm'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[1/mil]TO[1/mil]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 406.44107192739284;
fbQuantityMock.Units := '1/mil';

// Convert 1/mil to 1/mil
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := '1/mil',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 406.44107192739284,
    sExpected := '1/mil'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[1/micron]TO[1/m]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := -1709.2503851797792;
fbQuantityMock.Units := '1/micron';

// Convert 1/micron to 1/m
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := '1/m',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := -1709250385.1797793,
    sExpected := '1/m'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[1/kilometer]TO[1/mm]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 9602.86427445474;
fbQuantityMock.Units := '1/kilometer';

// Convert 1/kilometer to 1/mm
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := '1/mm',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 0.00960286427445474,
    sExpected := '1/mm'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[1/pm]TO[1/mm]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 8330.616996107969;
fbQuantityMock.Units := '1/pm';

// Convert 1/pm to 1/mm
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := '1/mm',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 8330616996107.969,
    sExpected := '1/mm'
);

TEST_FINISHED();

TEST('TestValidInputExpectNoErrorCorrectResult[1/mm]TO[1/cm]');

fbQuantityMock.ClearError();
fbQuantityMock.Val := 8507.446422989968;
fbQuantityMock.Units := '1/mm';

// Convert 1/mm to 1/mm
fbConvertUnits.ConvertQuantityLREAL(
    QuantityToConvert := fbQuantityMock,
    DesiredUnits := '1/cm',
    ConvertedQuantity := fbQuantityOutput
);

AssertNoError(Fallible := fbConvertUnits);

AssertNoErrorCorrectResult(
    iQuantity := fbQuantityOutput,
    fExpected := 85074.46422989968,
    sExpected := '1/cm'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>